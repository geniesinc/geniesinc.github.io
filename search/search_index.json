{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Genies Avatar SDK # The Genies Avatar SDK allows partners to bring the Genies Avatars experiences into their own apps! Users can create their own digital Avatar fully customized with branded attire, facial expressions, and digital animations How to get started # Step one: Apply for a partner account # To start using the Genies Avatar SDK, you must first contact Genies and apply for a partner account at api@genies.com Step two: Save your API key # In your partner approval process you'll receive an API Key that will be used to authenticate your API requests. The API Key does not expire unless expressly regenerated. Step three: Start using the API # After you got your Avatar SDK approval and your API Key it's time to start integrating your project with the Avatar API starting with Authentication","title":"Genies Avatar SDK"},{"location":"#genies-avatar-sdk","text":"The Genies Avatar SDK allows partners to bring the Genies Avatars experiences into their own apps! Users can create their own digital Avatar fully customized with branded attire, facial expressions, and digital animations","title":"Genies Avatar SDK"},{"location":"#how-to-get-started","text":"","title":"How to get started"},{"location":"#step-one-apply-for-a-partner-account","text":"To start using the Genies Avatar SDK, you must first contact Genies and apply for a partner account at api@genies.com","title":"Step one: Apply for a partner account"},{"location":"#step-two-save-your-api-key","text":"In your partner approval process you'll receive an API Key that will be used to authenticate your API requests. The API Key does not expire unless expressly regenerated.","title":"Step two: Save your API key"},{"location":"#step-three-start-using-the-api","text":"After you got your Avatar SDK approval and your API Key it's time to start integrating your project with the Avatar API starting with Authentication","title":"Step three: Start using the API"},{"location":"about/","text":"Foedera ligones # Nubes meritis # Lorem markdownum. Tamen dixit sibila cum non mihi avertite quinque, lateque, mei. Mortis nocte gelidi formas Orithyia Troiam iuro Nec sed que Ibi gestanda fremebundus dare Novas nec quodque templi soli utque color Facti infans # Avemque vultum: differt precatur qualia , latitantem velamina placent. Ait cavas i auras deduxisse unus ordine At facit et corona dextro ascendere vixque Achilles. Meritisne ignes omne noctis prensurum frigidus quae. Cum penna suis portabat sum, res nisi Cecrope qua quae promptior. Aves praecepta nimium praesens clamant; super fuit obstantia maior sociam vitat. Cede Nasamoniaci fassusque dicenti eosdem refert # Ubi da cursu albam cornibus terga culpavit, utere vero, nam nam at addidit aureus! Addiderim aspera et armo relicto , inpia stabis: erat tuis, fidissime limen. Spreta erubuit apertum Aethionque custodia ingratus Crantor, ego quem, in et pictis? Sine faece aeno est per est, et oscula deponit? Ipsa solidissima precibus Argos # Metu duo igitur offensa munera miserum et vomentem matrona constitit donis, simul fuit auras cornibus vobis iuncta, amplexas. Credens velante non vulnere capillos ferarum virgo longe tenebat et quae rursus tam mortali Styge, has undas! Rupit saepe angues quae vocibus inmansuetumque sciret postmodo prospiciens falsa paravi turres talibus inpensaque nam, et? Colla nam debere fortia? Per ibat Augustum omnibus soleo equo Calliope # Unda caespite gemmis vero cuius Pegason sumat amor flebile: videri . Fessam Argos petebat caelo et inpetus, Amphitryoniadae petii sed aestu aret, ora. Novi vestem tenuere iste silicem nostrae. Abest Thespiades tibi Ara omnia puer velox sic Mediis hominum Cum nec quod est inhibere putavi nuper Preme reddidit servat tu lapidum mirabile invasit Ille diu Hectora sibila recurvatis, ab levi hostis diebus feres reponunt . Sine sua placebimus singula. Hesperio neque minimum omnia iuvabat ventis et nympha; eminus posuit spretor formicas temptaret. Aves patiere iuvencae alti funus deriguit est Threicius virgo tamen gramine ira Alcyone solebat. Pererrat digessit summis.","title":"Foedera ligones"},{"location":"about/#foedera-ligones","text":"","title":"Foedera ligones"},{"location":"about/#nubes-meritis","text":"Lorem markdownum. Tamen dixit sibila cum non mihi avertite quinque, lateque, mei. Mortis nocte gelidi formas Orithyia Troiam iuro Nec sed que Ibi gestanda fremebundus dare Novas nec quodque templi soli utque color","title":"Nubes meritis"},{"location":"about/#facti-infans","text":"Avemque vultum: differt precatur qualia , latitantem velamina placent. Ait cavas i auras deduxisse unus ordine At facit et corona dextro ascendere vixque Achilles. Meritisne ignes omne noctis prensurum frigidus quae. Cum penna suis portabat sum, res nisi Cecrope qua quae promptior. Aves praecepta nimium praesens clamant; super fuit obstantia maior sociam vitat.","title":"Facti infans"},{"location":"about/#cede-nasamoniaci-fassusque-dicenti-eosdem-refert","text":"Ubi da cursu albam cornibus terga culpavit, utere vero, nam nam at addidit aureus! Addiderim aspera et armo relicto , inpia stabis: erat tuis, fidissime limen. Spreta erubuit apertum Aethionque custodia ingratus Crantor, ego quem, in et pictis? Sine faece aeno est per est, et oscula deponit?","title":"Cede Nasamoniaci fassusque dicenti eosdem refert"},{"location":"about/#ipsa-solidissima-precibus-argos","text":"Metu duo igitur offensa munera miserum et vomentem matrona constitit donis, simul fuit auras cornibus vobis iuncta, amplexas. Credens velante non vulnere capillos ferarum virgo longe tenebat et quae rursus tam mortali Styge, has undas! Rupit saepe angues quae vocibus inmansuetumque sciret postmodo prospiciens falsa paravi turres talibus inpensaque nam, et? Colla nam debere fortia?","title":"Ipsa solidissima precibus Argos"},{"location":"about/#per-ibat-augustum-omnibus-soleo-equo-calliope","text":"Unda caespite gemmis vero cuius Pegason sumat amor flebile: videri . Fessam Argos petebat caelo et inpetus, Amphitryoniadae petii sed aestu aret, ora. Novi vestem tenuere iste silicem nostrae. Abest Thespiades tibi Ara omnia puer velox sic Mediis hominum Cum nec quod est inhibere putavi nuper Preme reddidit servat tu lapidum mirabile invasit Ille diu Hectora sibila recurvatis, ab levi hostis diebus feres reponunt . Sine sua placebimus singula. Hesperio neque minimum omnia iuvabat ventis et nympha; eminus posuit spretor formicas temptaret. Aves patiere iuvencae alti funus deriguit est Threicius virgo tamen gramine ira Alcyone solebat. Pererrat digessit summis.","title":"Per ibat Augustum omnibus soleo equo Calliope"},{"location":"android/","text":"Android # Avatar Creator # For integrating the Avatar Creator in your Android App, see the Avatar Creator / Android section Authentication API wrapper library # The Authentication API wrapper library provides a convenient way to authenticate with your Partner API Account The Android Avatar Authentication library can be found at: https://github.com/geniesinc/android-genies-auth To use the Android Authentication library: Open gradle.properties file Add authToken=TOKEN_PROVIDED_BY_GENIES Open build.gradle (project) file Add the following to allprojects / repositories maven { url ' https : //jitpack.io' credentials { username authToken } } Open build.gradle (Module: app) file Add to dependencies implementation ' com . github . geniesinc : android - genies - auth : 0.0 . 2 - alpha ' Signing in # To manage the authentication session you first need to create an AvatarClient and call signIn using your Partner API Account username and password. If successful, sign in provides an AuthSession object containing the IdToken and RefreshToken required in other SDK interactions. Example private val avatarClient = AvatarClient ( context , clientId , null ) avatarClient . signIn ( username , password ) . onSuccess { authSession -> this . authSession = authSession } . onFailure { error -> Log . e ( \"GeniesSignIn\" , error . reason ) } Getting current session # If already signed in, you can use getSession() to get an updated AuthSession . The library refreshes your tokens behind the scene. If the refresh fails, you'll get a failure of type NoCachedSession and need to sign in again. Example avatarClient . getSession () . onSuccess { authSession -> this . authSession = authSession // Signed in } . onFailure { this . authSession = null // Signed out } Avatar API wrapper Library # The Avatar API wrapper Library provides a easy way to interact with the Assets and Closet APIs. The Android Avatar Library can be found at: https://github.com/geniesinc/android-genies-api To integrate the Avatar API Library into your Android project follow the steps: Open gradle.properties file Add authToken=TOKEN_PROVIDED_BY_GENIES Open build.gradle (project) file Add the following to allprojects / repositories maven { url ' https : //jitpack.io' credentials { username authToken } } Open build.gradle (Module: app) file Add to dependencies implementation ' com . github . geniesinc : android - genies - api : 0.0 . 4 - alpha : dev@ aar ' Use the AvatarAPIClient private val avatarClient: AvatarAPIClient = AvatarAPIClient(YOUR_API_KEY) All Avatar API Library interactions need to be authenticated with the Partner's API Account IdToken Getting a user by username # To get a user's userId use: avatarClient . getUser ( idToken , username ) . onSuccess { userInfo -> Log . d ( \"UserId\" , userInfo . userId ) } . onFailure { // do something } `` ### Getting an user ' s [ Avatar Closet ] ( assetsapi . md # closet ) To get a list of all the [ assets ] ( assetsapi . md # assets ) assigned to a user ' s closet use : ``` kotlin avatarClient . getClosetItems ( idToken , userId ) . onSuccess { closetItems -> // process closetItems } . onFailure { // do something } Depositing an asset to a user's closet # To deposit an asset to a user's closet use: avatarClient.depositAsset(idToken, userId, assetId) .onSuccess { closetItems -> // process closetItems } .onFailure { // do something } Withdrawing an asset from a user's closet # To withdraw an asset from a user's closet use: avatarClient.withdrawAsset(idToken, user.userId, assetId, assetInstanceId) .onSuccess { closetItems -> // process closetItems } .onFailure { // do something } Creating an anonymous user # To create a managed anonymous user use: avatarClient.createUser(idToken: String, username: String) .onSuccess { userInfo -> Log.d(\"UserId\", userInfo.userId) } .onFailure { // do something } Deleting an anonymous user # To delete a managed anonymous user use: avatarClient.deleteUser(idToken: String, userId: String) .onSuccess { userInfo -> Log.d(\"UserId\", userInfo.userId) } .onFailure { // do something }","title":"Android"},{"location":"android/#android","text":"","title":"Android"},{"location":"android/#avatar-creator","text":"For integrating the Avatar Creator in your Android App, see the Avatar Creator / Android section","title":"Avatar Creator"},{"location":"android/#authentication-api-wrapper-library","text":"The Authentication API wrapper library provides a convenient way to authenticate with your Partner API Account The Android Avatar Authentication library can be found at: https://github.com/geniesinc/android-genies-auth To use the Android Authentication library: Open gradle.properties file Add authToken=TOKEN_PROVIDED_BY_GENIES Open build.gradle (project) file Add the following to allprojects / repositories maven { url ' https : //jitpack.io' credentials { username authToken } } Open build.gradle (Module: app) file Add to dependencies implementation ' com . github . geniesinc : android - genies - auth : 0.0 . 2 - alpha '","title":"Authentication API wrapper library"},{"location":"android/#signing-in","text":"To manage the authentication session you first need to create an AvatarClient and call signIn using your Partner API Account username and password. If successful, sign in provides an AuthSession object containing the IdToken and RefreshToken required in other SDK interactions. Example private val avatarClient = AvatarClient ( context , clientId , null ) avatarClient . signIn ( username , password ) . onSuccess { authSession -> this . authSession = authSession } . onFailure { error -> Log . e ( \"GeniesSignIn\" , error . reason ) }","title":"Signing in"},{"location":"android/#getting-current-session","text":"If already signed in, you can use getSession() to get an updated AuthSession . The library refreshes your tokens behind the scene. If the refresh fails, you'll get a failure of type NoCachedSession and need to sign in again. Example avatarClient . getSession () . onSuccess { authSession -> this . authSession = authSession // Signed in } . onFailure { this . authSession = null // Signed out }","title":"Getting current session"},{"location":"android/#avatar-api-wrapper-library","text":"The Avatar API wrapper Library provides a easy way to interact with the Assets and Closet APIs. The Android Avatar Library can be found at: https://github.com/geniesinc/android-genies-api To integrate the Avatar API Library into your Android project follow the steps: Open gradle.properties file Add authToken=TOKEN_PROVIDED_BY_GENIES Open build.gradle (project) file Add the following to allprojects / repositories maven { url ' https : //jitpack.io' credentials { username authToken } } Open build.gradle (Module: app) file Add to dependencies implementation ' com . github . geniesinc : android - genies - api : 0.0 . 4 - alpha : dev@ aar ' Use the AvatarAPIClient private val avatarClient: AvatarAPIClient = AvatarAPIClient(YOUR_API_KEY) All Avatar API Library interactions need to be authenticated with the Partner's API Account IdToken","title":"Avatar API wrapper Library"},{"location":"android/#getting-a-user-by-username","text":"To get a user's userId use: avatarClient . getUser ( idToken , username ) . onSuccess { userInfo -> Log . d ( \"UserId\" , userInfo . userId ) } . onFailure { // do something } `` ### Getting an user ' s [ Avatar Closet ] ( assetsapi . md # closet ) To get a list of all the [ assets ] ( assetsapi . md # assets ) assigned to a user ' s closet use : ``` kotlin avatarClient . getClosetItems ( idToken , userId ) . onSuccess { closetItems -> // process closetItems } . onFailure { // do something }","title":"Getting a user by username"},{"location":"android/#depositing-an-asset-to-a-users-closet","text":"To deposit an asset to a user's closet use: avatarClient.depositAsset(idToken, userId, assetId) .onSuccess { closetItems -> // process closetItems } .onFailure { // do something }","title":"Depositing an asset to a user's closet"},{"location":"android/#withdrawing-an-asset-from-a-users-closet","text":"To withdraw an asset from a user's closet use: avatarClient.withdrawAsset(idToken, user.userId, assetId, assetInstanceId) .onSuccess { closetItems -> // process closetItems } .onFailure { // do something }","title":"Withdrawing an asset from a user's closet"},{"location":"android/#creating-an-anonymous-user","text":"To create a managed anonymous user use: avatarClient.createUser(idToken: String, username: String) .onSuccess { userInfo -> Log.d(\"UserId\", userInfo.userId) } .onFailure { // do something }","title":"Creating an anonymous user"},{"location":"android/#deleting-an-anonymous-user","text":"To delete a managed anonymous user use: avatarClient.deleteUser(idToken: String, userId: String) .onSuccess { userInfo -> Log.d(\"UserId\", userInfo.userId) } .onFailure { // do something }","title":"Deleting an anonymous user"},{"location":"assetsapi/","text":"Assets API # When creating their Avatar, a user chooses assets that are used to compose the Avatar's appearance or Closet . Assets # An asset represents a feature of the user's avatar. It can be a piece of clothing, an accesory or a body feature. Some assets are common for all user avatars, but other assets are customised and need to be assigned to the user by the SDK Partner. Assets properties # Name: The name of the asset. e.g.: Bunny Helmet Image: An image representing the asset Description: A brief description of the asset Price: If applicable: the price of the asset. See Assets Universe Rarity: A representation of the availability of the asset. There are different tiers of rarity: basic , very rare . Higher rarity assets will be available in lower quanitities and will eventually go out of stock. Quantity: If applicable: the remaining available quantity of the asset. Items with a limited quantity go out of stock when reaching the quantity limit. Asset representation in the API: { \"displayName\" : \"Brown Utility Vest\" , \"description\" : \"This is a beautiful Brown Utility Vest\" , \"assetId\" : \"98658ec1-6a82-4070-a863-9fe7af3b1346\" , \"name\" : \"jacket-0017-utilityvest_skin0001\" , \"location\" : \"https://s3.us-west-2.amazonaws.com/genies-cms/assetsViews%2Fmain%2Fjacket-0017-utilityvest_skin0001.png\" , \"category\" : \"jacket\" , \"available\" : true , \"priceUsd\" : null , \"maxInstanceCount\" : 300 , \"status\" : \"visible\" , \"rarity\" : \"basic\" } Closet # The closet represents all the assets currently available to a user. More assets can be assigned to a user Assets Universe # Each SDK Partner can define their own Asset Universe. An asset universe is a list of assets and custom assets that the users will have available when creating their Avatar. Custom assets # An SDK Partner can create their own custom assets and assign them a rarity, quantity and price . The SDK Partner can provide the custom assets as a user reward, have them available in a Store or assign them to a user based on other logic. Assets management CMS # The CMS is a tool provided to SDK Partners where you can manage: default assets for your user's avatars assets that are used as rewards assets that appear in the Asset Store Access to the CMS tool is granted in the Partner approval process Making HTTP requests # HTTP Request URL # The Assets API URL is: https://composer-api-dev.genies.com/{{stage}} Stage # The stage represents the Avatar API version. The current stage version of the API is v1 . For testing purposes the stage should be set to dev e.g.: https://composer-api-dev.genies.com/dev Authenticating requests # Request authentication is done by including the x-api-key: {{SDK_PARTNER_API_KEY}} header and the Authorization: Bearer {{ID_TOKEN}} header API KEY # The SDK_PARTNER_API_KEY is provided for the SDK Partner when applying for a partner account For testing purposes the SDK_PARTNER_API_KEY in the x-api-key header should be set to defaultapikey-dev-0123456789 ID TOKEN # The ID_TOKEN needed when authenticating the requests is the IdToken provided when the user signs in Errors # When you send requests to and get responses from the Assets API, you might encounter two types of API error: Client errors : Client errors are indicated by a 4xx HTTP response code. Client errors indicate that Assets API found a problem with the client request, such as an authentication failure or missing required parameters. Server errors : Server errors are indicated by a 5xx HTTP response code, and need to be resolved by the team at Genies For each API error, the Authentication API returns the following values: A status code , for example, 400 An error message , for example, Access Denied Example { \"Message\": \"Access Denied\" } Getting the Avatar User Id # To interact with a user's Avatar you need to first get the Avatar User Id To get the Avatar User Id call GET https://composer-api-dev.genies.com/{{stage}}/user Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/user' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTIwMDg5MjcsImlhdCI6MTYxMTkyMjUyNywiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.EAVXUe10QTCHf7655aHFipzyNvAcOo0ggP4YOn5mMM-Tv-EbWrIsxWPqqW_0mXykKWyJIuzS2kBWs9IAto6HTZhbWndcGpLR8hyWd4Ls3tRQ2VqZ3wDQzo7rCq97Z6FK3y8dafWzDp72UVUwgfEyAvbaiMONhFAf-9YRKZVpTt7-Xj6eH-zRLfwIb6t_1f5PHmXR7KJ_UOoXerlzQEaKoSOHNkdGAsdpHpO60PLSm-j556mXFhCE2rz9rCX8HWmV1dr-VMf8owK7aWi_-EG9TJB0o6Arc5TwfM3TEO3zp7KU_qiTR5sUMvuUarj37deB56L6ae3V2SI6SoxISMVeUQ' Response [ { \"userId\": \"a482ce33-c84b-48c0-81fc-edd1e5f0eae6\", \"emailVerified\": false, \"email\": \"testuser@genies.com\" } ] Getting Avatar Info # To get information about a user's avatar call GET https://composer-api-dev.genies.com/{{stage}}/avatar?userId={{userId}} The {{userId}} is provided when getting the Avatar User Id The avatarId in the response will be used to generate photos and animations using the Renderer API Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/avatar?userId=a482ce33-c84b-48c0-81fc-edd1e5f0eae6' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTIwMDg5MjcsImlhdCI6MTYxMTkyMjUyNywiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.EAVXUe10QTCHf7655aHFipzyNvAcOo0ggP4YOn5mMM-Tv-EbWrIsxWPqqW_0mXykKWyJIuzS2kBWs9IAto6HTZhbWndcGpLR8hyWd4Ls3tRQ2VqZ3wDQzo7rCq97Z6FK3y8dafWzDp72UVUwgfEyAvbaiMONhFAf-9YRKZVpTt7-Xj6eH-zRLfwIb6t_1f5PHmXR7KJ_UOoXerlzQEaKoSOHNkdGAsdpHpO60PLSm-j556mXFhCE2rz9rCX8HWmV1dr-VMf8owK7aWi_-EG9TJB0o6Arc5TwfM3TEO3zp7KU_qiTR5sUMvuUarj37deB56L6ae3V2SI6SoxISMVeUQ' Response [ { \"avatarId\": \"42c6a6da-1da2-4aef-a74e-feb36ae4d404\", \"ownerId\": \"a482ce33-c84b-48c0-81fc-edd1e5f0eae6\", \"created\": 1611922828, \"lastModified\": 1611923681, \"status\": \"visible\", \"gender\": \"male\", \"defType\": \"normal\", \"definition\": \"{\\\"BodyTypeLabel\\\":\\\"male\\\",\\\"Clothes\\\":[\\\"underwearBottom-0001-base_skin0000\\\",\\\"eyebrows-0006-sassy_skin0000\\\",\\\"hair-0056-tikTok_skin0000\\\",\\\"jacket-0027-floralGreenGucci_skin0000\\\"],\\\"FaceBlendshapes\\\":[{\\\"Category\\\":\\\"lips\\\",\\\"AssetName\\\":\\\"e\\\",\\\"IsEnabled\\\":true},{\\\"Category\\\":\\\"ears\\\",\\\"AssetName\\\":\\\"smallBulky\\\",\\\"IsEnabled\\\":true}],\\\"EyeColor\\\":\\\"EyeColor_DarkBrown\\\",\\\"EyebrowColor\\\":\\\"HairColor_DarkBrown\\\",\\\"FacialHairColor\\\":\\\"HairColor_DarkBrown\\\",\\\"HairColor\\\":\\\"HairColor_DarkBrown\\\",\\\"SkinColor\\\":\\\"skinColor_v0001\\\"}\" } ] Assigning an asset to a user's Closet # In order for an asset to be available to a user it needs to be assigned to their Closet. To assign an asset to a user closet you should call PATCH https://composer-api-dev.genies.com/{{stage}}/user/{{userId}}/closet and provide the assignment operation details in the request body. The {{userId}} is provided when getting the Avatar User Id Example curl --location --request PATCH 'https://composer-api-dev.genies.com/dev/user/a482ce33-c84b-48c0-81fc-edd1e5f0eae6/closet' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTIwMDg5MjcsImlhdCI6MTYxMTkyMjUyNywiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.EAVXUe10QTCHf7655aHFipzyNvAcOo0ggP4YOn5mMM-Tv-EbWrIsxWPqqW_0mXykKWyJIuzS2kBWs9IAto6HTZhbWndcGpLR8hyWd4Ls3tRQ2VqZ3wDQzo7rCq97Z6FK3y8dafWzDp72UVUwgfEyAvbaiMONhFAf-9YRKZVpTt7-Xj6eH-zRLfwIb6t_1f5PHmXR7KJ_UOoXerlzQEaKoSOHNkdGAsdpHpO60PLSm-j556mXFhCE2rz9rCX8HWmV1dr-VMf8owK7aWi_-EG9TJB0o6Arc5TwfM3TEO3zp7KU_qiTR5sUMvuUarj37deB56L6ae3V2SI6SoxISMVeUQ' \\ --header 'Content-Type: application/json' \\ --data-raw '[ { \"op\": \"deposit\", \"item\": { \"assetId\": \"2deafeed-13b5-4222-ac48-9ba66e87114a\" } } ]' Response [ { \"assetId\": \"2deafeed-13b5-4222-ac48-9ba66e87114a\", \"instanceId\": \"94b0ff56-58b0-445b-81af-2af2218c814d\", \"inPossession\": true, \"updated\": 1611928921 } ]","title":"Avatar API"},{"location":"assetsapi/#assets-api","text":"When creating their Avatar, a user chooses assets that are used to compose the Avatar's appearance or Closet .","title":"Assets API"},{"location":"assetsapi/#assets","text":"An asset represents a feature of the user's avatar. It can be a piece of clothing, an accesory or a body feature. Some assets are common for all user avatars, but other assets are customised and need to be assigned to the user by the SDK Partner.","title":"Assets"},{"location":"assetsapi/#assets-properties","text":"Name: The name of the asset. e.g.: Bunny Helmet Image: An image representing the asset Description: A brief description of the asset Price: If applicable: the price of the asset. See Assets Universe Rarity: A representation of the availability of the asset. There are different tiers of rarity: basic , very rare . Higher rarity assets will be available in lower quanitities and will eventually go out of stock. Quantity: If applicable: the remaining available quantity of the asset. Items with a limited quantity go out of stock when reaching the quantity limit. Asset representation in the API: { \"displayName\" : \"Brown Utility Vest\" , \"description\" : \"This is a beautiful Brown Utility Vest\" , \"assetId\" : \"98658ec1-6a82-4070-a863-9fe7af3b1346\" , \"name\" : \"jacket-0017-utilityvest_skin0001\" , \"location\" : \"https://s3.us-west-2.amazonaws.com/genies-cms/assetsViews%2Fmain%2Fjacket-0017-utilityvest_skin0001.png\" , \"category\" : \"jacket\" , \"available\" : true , \"priceUsd\" : null , \"maxInstanceCount\" : 300 , \"status\" : \"visible\" , \"rarity\" : \"basic\" }","title":"Assets properties"},{"location":"assetsapi/#closet","text":"The closet represents all the assets currently available to a user. More assets can be assigned to a user","title":"Closet"},{"location":"assetsapi/#assets-universe","text":"Each SDK Partner can define their own Asset Universe. An asset universe is a list of assets and custom assets that the users will have available when creating their Avatar.","title":"Assets Universe"},{"location":"assetsapi/#custom-assets","text":"An SDK Partner can create their own custom assets and assign them a rarity, quantity and price . The SDK Partner can provide the custom assets as a user reward, have them available in a Store or assign them to a user based on other logic.","title":"Custom assets"},{"location":"assetsapi/#assets-management-cms","text":"The CMS is a tool provided to SDK Partners where you can manage: default assets for your user's avatars assets that are used as rewards assets that appear in the Asset Store Access to the CMS tool is granted in the Partner approval process","title":"Assets management CMS"},{"location":"assetsapi/#making-http-requests","text":"","title":"Making HTTP requests"},{"location":"assetsapi/#http-request-url","text":"The Assets API URL is: https://composer-api-dev.genies.com/{{stage}}","title":"HTTP Request URL"},{"location":"assetsapi/#stage","text":"The stage represents the Avatar API version. The current stage version of the API is v1 . For testing purposes the stage should be set to dev e.g.: https://composer-api-dev.genies.com/dev","title":"Stage"},{"location":"assetsapi/#authenticating-requests","text":"Request authentication is done by including the x-api-key: {{SDK_PARTNER_API_KEY}} header and the Authorization: Bearer {{ID_TOKEN}} header","title":"Authenticating requests"},{"location":"assetsapi/#api-key","text":"The SDK_PARTNER_API_KEY is provided for the SDK Partner when applying for a partner account For testing purposes the SDK_PARTNER_API_KEY in the x-api-key header should be set to defaultapikey-dev-0123456789","title":"API KEY"},{"location":"assetsapi/#id-token","text":"The ID_TOKEN needed when authenticating the requests is the IdToken provided when the user signs in","title":"ID TOKEN"},{"location":"assetsapi/#errors","text":"When you send requests to and get responses from the Assets API, you might encounter two types of API error: Client errors : Client errors are indicated by a 4xx HTTP response code. Client errors indicate that Assets API found a problem with the client request, such as an authentication failure or missing required parameters. Server errors : Server errors are indicated by a 5xx HTTP response code, and need to be resolved by the team at Genies For each API error, the Authentication API returns the following values: A status code , for example, 400 An error message , for example, Access Denied Example { \"Message\": \"Access Denied\" }","title":"Errors"},{"location":"assetsapi/#getting-the-avatar-user-id","text":"To interact with a user's Avatar you need to first get the Avatar User Id To get the Avatar User Id call GET https://composer-api-dev.genies.com/{{stage}}/user Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/user' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTIwMDg5MjcsImlhdCI6MTYxMTkyMjUyNywiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.EAVXUe10QTCHf7655aHFipzyNvAcOo0ggP4YOn5mMM-Tv-EbWrIsxWPqqW_0mXykKWyJIuzS2kBWs9IAto6HTZhbWndcGpLR8hyWd4Ls3tRQ2VqZ3wDQzo7rCq97Z6FK3y8dafWzDp72UVUwgfEyAvbaiMONhFAf-9YRKZVpTt7-Xj6eH-zRLfwIb6t_1f5PHmXR7KJ_UOoXerlzQEaKoSOHNkdGAsdpHpO60PLSm-j556mXFhCE2rz9rCX8HWmV1dr-VMf8owK7aWi_-EG9TJB0o6Arc5TwfM3TEO3zp7KU_qiTR5sUMvuUarj37deB56L6ae3V2SI6SoxISMVeUQ' Response [ { \"userId\": \"a482ce33-c84b-48c0-81fc-edd1e5f0eae6\", \"emailVerified\": false, \"email\": \"testuser@genies.com\" } ]","title":"Getting the Avatar User Id"},{"location":"assetsapi/#getting-avatar-info","text":"To get information about a user's avatar call GET https://composer-api-dev.genies.com/{{stage}}/avatar?userId={{userId}} The {{userId}} is provided when getting the Avatar User Id The avatarId in the response will be used to generate photos and animations using the Renderer API Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/avatar?userId=a482ce33-c84b-48c0-81fc-edd1e5f0eae6' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTIwMDg5MjcsImlhdCI6MTYxMTkyMjUyNywiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.EAVXUe10QTCHf7655aHFipzyNvAcOo0ggP4YOn5mMM-Tv-EbWrIsxWPqqW_0mXykKWyJIuzS2kBWs9IAto6HTZhbWndcGpLR8hyWd4Ls3tRQ2VqZ3wDQzo7rCq97Z6FK3y8dafWzDp72UVUwgfEyAvbaiMONhFAf-9YRKZVpTt7-Xj6eH-zRLfwIb6t_1f5PHmXR7KJ_UOoXerlzQEaKoSOHNkdGAsdpHpO60PLSm-j556mXFhCE2rz9rCX8HWmV1dr-VMf8owK7aWi_-EG9TJB0o6Arc5TwfM3TEO3zp7KU_qiTR5sUMvuUarj37deB56L6ae3V2SI6SoxISMVeUQ' Response [ { \"avatarId\": \"42c6a6da-1da2-4aef-a74e-feb36ae4d404\", \"ownerId\": \"a482ce33-c84b-48c0-81fc-edd1e5f0eae6\", \"created\": 1611922828, \"lastModified\": 1611923681, \"status\": \"visible\", \"gender\": \"male\", \"defType\": \"normal\", \"definition\": \"{\\\"BodyTypeLabel\\\":\\\"male\\\",\\\"Clothes\\\":[\\\"underwearBottom-0001-base_skin0000\\\",\\\"eyebrows-0006-sassy_skin0000\\\",\\\"hair-0056-tikTok_skin0000\\\",\\\"jacket-0027-floralGreenGucci_skin0000\\\"],\\\"FaceBlendshapes\\\":[{\\\"Category\\\":\\\"lips\\\",\\\"AssetName\\\":\\\"e\\\",\\\"IsEnabled\\\":true},{\\\"Category\\\":\\\"ears\\\",\\\"AssetName\\\":\\\"smallBulky\\\",\\\"IsEnabled\\\":true}],\\\"EyeColor\\\":\\\"EyeColor_DarkBrown\\\",\\\"EyebrowColor\\\":\\\"HairColor_DarkBrown\\\",\\\"FacialHairColor\\\":\\\"HairColor_DarkBrown\\\",\\\"HairColor\\\":\\\"HairColor_DarkBrown\\\",\\\"SkinColor\\\":\\\"skinColor_v0001\\\"}\" } ]","title":"Getting Avatar Info"},{"location":"assetsapi/#assigning-an-asset-to-a-users-closet","text":"In order for an asset to be available to a user it needs to be assigned to their Closet. To assign an asset to a user closet you should call PATCH https://composer-api-dev.genies.com/{{stage}}/user/{{userId}}/closet and provide the assignment operation details in the request body. The {{userId}} is provided when getting the Avatar User Id Example curl --location --request PATCH 'https://composer-api-dev.genies.com/dev/user/a482ce33-c84b-48c0-81fc-edd1e5f0eae6/closet' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTIwMDg5MjcsImlhdCI6MTYxMTkyMjUyNywiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.EAVXUe10QTCHf7655aHFipzyNvAcOo0ggP4YOn5mMM-Tv-EbWrIsxWPqqW_0mXykKWyJIuzS2kBWs9IAto6HTZhbWndcGpLR8hyWd4Ls3tRQ2VqZ3wDQzo7rCq97Z6FK3y8dafWzDp72UVUwgfEyAvbaiMONhFAf-9YRKZVpTt7-Xj6eH-zRLfwIb6t_1f5PHmXR7KJ_UOoXerlzQEaKoSOHNkdGAsdpHpO60PLSm-j556mXFhCE2rz9rCX8HWmV1dr-VMf8owK7aWi_-EG9TJB0o6Arc5TwfM3TEO3zp7KU_qiTR5sUMvuUarj37deB56L6ae3V2SI6SoxISMVeUQ' \\ --header 'Content-Type: application/json' \\ --data-raw '[ { \"op\": \"deposit\", \"item\": { \"assetId\": \"2deafeed-13b5-4222-ac48-9ba66e87114a\" } } ]' Response [ { \"assetId\": \"2deafeed-13b5-4222-ac48-9ba66e87114a\", \"instanceId\": \"94b0ff56-58b0-445b-81af-2af2218c814d\", \"inPossession\": true, \"updated\": 1611928921 } ]","title":"Assigning an asset to a user's Closet"},{"location":"authentication/","text":"Genies Avatar Authentication # Modes of authenticating a user # There are multiple ways of linking a user with their Genies Avatar: Using the pre-built Sign Up/Sign In forms in the Genies Avatar Creator Creating custom anonymous users (requires Genies approval) Using the Genies Avatar Creator # The easiest way to link your users with their Genies Avatar is to use the Avatar Creator When using the Avatar Creator users can create an Avatar Account and associate their personal avatar with it. Every Avatar created this way will get an associated UserId that needs to be stored and associated with the user of the Partner app. Using anonymous managed user accounts # Another way of linking users with their Genies Avatar is using a Partner API Account to create managed user accounts. The managed user accounts are anonymous and all user data is opaque to Genies (no personal user data is sent to Genies). For more information about using the Partner API Account check the Managed Users section The Partner API Account # In order to created managed accounts for your users, you need to request specific access to this feature while applying for your Partner Account . When approved access to the managed accounts feature, you'll receive credentials for a Partner API Account . Partner API Account Authentication # In order to manage anonymous user accounts you need to authenticate with your provided Partner API Account credentials and get the associated IdToken and RefreshToken . Genies provides multiple ways of authenticating your Partner API Account: HTTP requests Android API wrapper library iOS wrapper IdToken and RefreshToken # The IdToken is used to authenticate all requests made by the Partner to the Avatar API and the Anonymous Users API . It's usually sent as part of the Authorization header. The RefreshToken is used to authenticate all interactions with the Avatar Creator The IdToken and RefreshToken are provided when signing in with a Partner API account Partner API Account HTTP Authentication # The Avatar Authentication API uses AWS Cognito to handle authentication. The IdToken provided by the authentication flow is used to authenticate all the subsequent actions with the Avatar API. HTTP Request URL # The Authentication API URL is: https://cognito-idp.us-west-2.amazonaws.com/ Requests and response formats # The Avatar Authentication API uses HTTP POST requests with JSON arguments and JSON responses HTTP Header Contents # The Avatar Authentication API requires the following information in the headers of an HTTP request: Content-Type Specifies JSON and the version, for example, Content-Type: application/x-amz-json-1.0 X-Amz-Target Specifies the Cognito Action type, for example: 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth' HTTP Request Body # The Avatar API requests require the request body to be sent in JSON format. HTTP Responses # The Avatar API requests include JSON-formatted data in the response Errors # When you send requests to and get responses from the Authentication API, you might encounter two types of API error: Client errors : Client errors are indicated by a 4xx HTTP response code. Client errors indicate that Authentication API found a problem with the client request, such as an authentication failure or missing required parameters. Server errors : Server errors are indicated by a 5xx HTTP response code, and need to be resolved by the Amazon Cognito service For each API error, the Authentication API returns the following values: A status code , for example, 400 An error code , for example, ValidationException An error message , for example, 1 validation error detected: Value at 'password' failed to satisfy constraint: Member must have length greater than or equal to 6 Partner API Account Sign In # To use your Partner API Account you should sign in and get the IdToken used to authenticate all other Avatar SDK interactions. To sign in you should use the X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth action header and POST a JSON containing the AuthFlow key set to USER_PASSWORD_AUTH and an AuthParameters object with the USERNAME and PASSWORD keys. Example curl --location --request POST 'https://cognito-idp.us-west-2.amazonaws.com/' \\ --header 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth' \\ --header 'Content-Type: application/x-amz-json-1.1' \\ --data-raw '{ \"AuthFlow\": \"USER_PASSWORD_AUTH\", \"ClientId\": \"YOUR_CLIENT_ID\", \"AuthParameters\": { \"USERNAME\": \"testuser@genies.com\", \"PASSWORD\": \"exampleToughPassword\" } }' Response HTTP/1.1 200 OK Date: Thu, 21 Jan 2021 18:39:38 GMT Content-Type: application/x-amz-json-1.1 Content-Length: 3879 Connection: keep-alive x-amzn-RequestId: 0d716321-5de1-4a8a-87cf-6aca1aa47c89 { \"AuthenticationResult\": { \"AccessToken\": \"eyJraWQiOiJ1Wnh4cHB2VGVvVFJURWZxeGpnZU1OVHd1XC9oQld3U29xMThOa2duQ0xvZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJiNDRmYWEyZS0wMGI1LTQ5ZjItOWZiNC03ZWNjZTEzZjU0OGUiLCJldmVudF9pZCI6IjA2NjNlNWIxLTMxNTctNDEzNC04MmYzLWE4NGUwZGNiNGQyYiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2MTEyNTQwNTEsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImV4cCI6MTYxMTM0MDQ1MSwiaWF0IjoxNjExMjU0MDUxLCJqdGkiOiI4YTlkMjBhMS01YmRjLTQ0NDMtOTBmOC1mYjBkYzI4YTI2YWMiLCJjbGllbnRfaWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwidXNlcm5hbWUiOiJiNDRmYWEyZS0wMGI1LTQ5ZjItOWZiNC03ZWNjZTEzZjU0OGUifQ.lcCE3siEZ8xIwsWkmc4GYvM8f6kDSR2rjY4bKvYe9HbEZXZUke6E4CfpJ6cM3lMpRqTTO4EEd3icIpqdKvBdtR_lxlk-OFxu20oQIuvhiFLaj_519OUCQL3PkasrvBiSHmjz56HaSTRoyzIfLUMBpGJjQnzmeq8PLmSQXw1i1jgyQjRViRLdPMP3ShpXQBnCSamgsnI0yhKMC7SDz5qwnenQm6DwqIHB43lcqDLmaB2T1JtlKnjmD7WG0jaDEMdED3k70iW6mDEOKBOi4-GSeRzRwsnl9uXDDManOogPBKz2Gjr_feGPFeQxF3N65DxRh3DNlObEpq4dPD_OUvkGHA\", \"ExpiresIn\": 86400, \"IdToken\": \"eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJiNDRmYWEyZS0wMGI1LTQ5ZjItOWZiNC03ZWNjZTEzZjU0OGUiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJldmVudF9pZCI6IjA2NjNlNWIxLTMxNTctNDEzNC04MmYzLWE4NGUwZGNiNGQyYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjExMjU0MDUxLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiYjQ0ZmFhMmUtMDBiNS00OWYyLTlmYjQtN2VjY2UxM2Y1NDhlIiwiZXhwIjoxNjExMzQwNDUxLCJpYXQiOjE2MTEyNTQwNTEsImVtYWlsIjoidGVtcG9yYXJ5QGdlbmllcy5jb20ifQ.BcqX5bviYoWDOO1dRd45xoJhPJFIEjFnJNaJYXcoomGob-RNn1MNIXr6qK4IcStX_0-EDjj7O7os5Psnq1Jyk3SOABUKyj1ThnAVBYXzfHAYSj5Q7n9D5wFh4rS1hnmkLQBw0ENNxwaf_sCuQh3x9M00bAy3gOH3Y4IPOCwN7T5n1_1x7TiZEZ1nXeZeSUUJnyzh63xpeB1XLtoBF1B2Sc3bfZQcF93hNGFKspxD5_wvX0dWNuMUr-xXDMSfG8L80p9CorkWEhmLCC7AKC2qK-YVJUcKScRS_kbM-Y0CUD0dRn6pmx8RG2D3-wJRonY2STV3ehWeYx17rA3gpl-c5g\", \"RefreshToken\": \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.BfxMdVNFP7f6W35WUlvihLhCPotJVoXPOHAP1GzU-UHT6WC8KbAFjT77UW22SlOQDlViUz-ykFBZmcYi44LSc9LGaFSPoOYsPpmRkzONqKlk9K9pJ2Wv8t_GaTKc7N5LxBefUpmdgVordpc4LWsJR0JhslR0yh7JsOLZtQ6AahEIzeecLdiBvIgCFpxE-RlqIc34FD_jikwfo6-j0_bFsmptl6BASJhN-K8OZuGXQWhzjjdvKi_h-tkqg2HuSDk52k2LRlg_iGWPoyFUomeWKn_02U1z0ojXjC9OV34u0Wgpmk_hpE34YXs-8fHkRP50YBV-iR4D8qMCdRALJvpYrQ.OlwZ35YXQ7OR5swV.6A7mLSo82yqTlaGRRTtDEklVBgjShZyvtkAqJr4sZ-ec3QqK_OZWWMsMTAIvcGHGxD1CTjZ7ZxFLgmGi17UkylknHmjkV0XzxGUFKMA_mMQcJpXOg58QTlLa2bdC_CAM7hFddZAHGsH7yJd4aZ_h-Bk2FQKlumDYSPufXm_GgJNCINKxzYofEK-GoZP38WO4PiSxuzhxbxPnWTxgbKJZjGhRwqzkYbPNnKLKhnV-qd7o57MrMRNaBUaLvNFJLTpsqJ8hDKDVl5BlkirLgBymQegkkQ4vjmBcfuASwMjALzjqmZpokoZ5ledGOn0lcTMKGRbKGe-x5AtnCFxduCwWJwQFoJgVa38wGrvo7_NUDTVEE_t3L-EwtlEXbOXkVOi8zdxWlsACQJhbTTpJKhJT9eAjhwKF-hkREwMgf7CyVddN-6oYMbPZiTWzkHxDetc03btRoI2iRfxUvwJ3IT59yX_QrNx4KG_Qr7RT3-bEOkBRO6j8PxB2-p79s86Wr4ExuNSo7_mTM2xoXNzp13kDjDAVx1tuyHv8xi6gM7IV4Ly82BroknTxL8vnurbLhQq38ZUNXtixajBPv2KvSBKtdojzq-v0SZn9BNdC66Nl3vEPA3yAOjcta3ehq_JixKC1Cf2dZ4xGfUBOSyXiTXBKZUMsXwesTQqzjZcgEOctAlVITuBhOJ3M78BxHlu-JBHTaxoERsnu3QJT0CN2juyyEZrTubkEhxhu97W_97eXj7AbrwqOIdEAPa8euA-2KpL4W8Fw3go-wyEEqa_ilobotygEomgo-Ql504wqsLAr7NOZEa5FU13kZ939jqEnkLCiIpsyDul0Z37FzbglOvzqykmW2XXyHOVMnSFuzKJI30hJ1txUftrzwZoXRU2_vP2cDN1bv8zYaTYUWkT-nVwGze57AGHkj9m-7Y-KqXYU5W4yPLCQzY9EeBqwXX34AscbpaxbuUONQjRtUpQjqXaZRqFnc-nPI5hoqYKjvR8FwjYDCO7huf9PCgl1oB2VR2m1s6N2CscFg2YAGZlSOJvlxlT3P9qytGYYK1-2ce1AfI2RLg6rurCgbqnFFfBSeqgTr48G95kWhYMlk1k28xs3DBmvNqbrsXrMmk2ZGcpy_TvA58-T-x5TPMo7bpPOSzPcGoJLadpVDv7lTuaUc8CY7L3Un1A1wifiJpY-O7d3wP8Jbmiq3b9NS2sB76h8t8ifVfZcbE20ECI_1-tD6Vw9lhYa6e3Vw3xNPLej0O6xWNR4EAgRKjcYikqfrkHhuWU-cCX513WiVRpoLl-9SS5pqELlLjYR2BJeV7-kVXE0Ly8jePcFut6GcE1P.miEFKs02GC-tXwUmvk0faw\", \"TokenType\": \"Bearer\" }, \"ChallengeParameters\": {} } Errors # NotAuthorizedException : Incorrect username or password. Refreshing the IdToken # The IdToken provided when signing in expires after 1 day and needs to be refreshed using the RefreshToken . The RefreshToken has a validity of 30 days. To refresh the tokens you should POST a JSON containing the AuthFlow key set to REFRESH_TOKEN_AUTH and a AuthParameters object containing the RefreshToken . Example curl --location --request POST 'https://cognito-idp.us-west-2.amazonaws.com/' \\ --header 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth' \\ --header 'Content-Type: application/x-amz-json-1.1' \\ --data-raw '{ \"AuthFlow\": \"REFRESH_TOKEN_AUTH\", \"ClientId\": \"YOUR_CLIENT_ID\", \"AuthParameters\": { \"REFRESH_TOKEN\": \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.RsNP_jdQ-ocBqevwXhpd_mYX2353asFU1ct2yKAnNqTycxxy5mAyTxEX2-60AjxPYmnXLA3l4P9FyKWyPenuYMt0fMIXJZjJ62ZYuKbnIaSBKFSdQPzDCEqCzaQr-vhdJEux4gwMkvnq0Medw7R-RokR3Y_vpl-XGPz3XKKSYycfNxW4YQQ5hlkAoX7Ni4ocMhVLE7hvw49aFWC4mVwmCmpacegMJDepTfTG5mtCt77VtlL3ZwWgXTEX8QTX9EIbDiFJ8k4lks6o8Ci99Spe-epvOrDyW7ZSov5j8ZYzCU7i6w7nJwwIAleFxBg-ogC6_vR4770CvDe1ygn2SQ0N4Q.Nz-pgOpahA145FWq.I9uxAY5V1X1QpIF4LeeToJcon27To5goGq-V7JpLLE-ou0OCl55cQgZxqvc6jspeIkyTQzwPQpmbIqv15UPMptM_qXQQp-6HT7LiL84GnIHL-nUe2wyyYvpvZpTxmLvbnIyEqxjLKjm_gALmDCL9Vb4mMa7Y504xwlqcutpogVLJFO2aMoShE5FrknYI6A2QbJPmpA9VJerxF3lfagCrxE5_u0gVIQWNxCvLfCklRnP5GArTlzhari3UnCW63Z0yf6_jHKe0NvdzFzgRZzD88j7yPZJvIZOVBKpv3PJ3k_6oVwm4A5wHNoF9UkLuWElPcywj7cwb8FcAV5rPDYxhSGqUBXCC2yrSteDS3gXq4xGRp6kJSQaTN9vfxYNpl_JcVlipEy3b5Lk5yEarxrEP5bmEaAhVzLzfvWkBcUrC5rXyPC83quojjj8_lKTFgVQabiO83j4Vi_2aYS7AIxeN5OdoHQ1qH50MeBU6ro6wZp8Gn_Qp8r9a6RR9ccrMnU-P87TEjcMsPssczu2rYllGK7eFsGthHKUNDIZEywT5LIyFuwvk1Ig8uRKzE2MmpARVv05LsshJyqLglXnIMTuwuPI4vxWtt-9SMwaFR5ZjCha-l-Vrnw5680j08sqchMeP6tRPET6U-CXITt6OAp68j8D6OdHdRYxT8uMCC8NZs-_1VF33sOzvLBYQFeZ34M2H2TeSSldlufIt-bxVWvKen26ogWHFa5RF5913qt-st3SNYwX2v0UCnbk-pODAkmIe-5cCOPw-KKzJQphfBluzAa-CfdkRGOtT0wDp8h58-If4y9nefOtKmvRW-lykpSTrgASWLsXvkn5W1cK--VU5sVpz9dCFMG-LpsZCSSqmdMgEZosbPP3NsUkhpBSJ6oZaEby_qdHw72v-0gtxWl5y-zGNvoYG0-GiJC6MUdX2GyKLJCi4Vf-EpGV3HxiA3FGVR6eurjRq6ZYBaXBRTXD7PIR1I12TacEy6j97kAoW82WFvF5wImnQHHjk7lUc_7fR5OQHtsAq2peIaKU5jylHQY7jhtLRJiiAqCKK18XRRgJeZNTVNcg5wlOiZ9eaMAN-9_YBgZCW4SzAJsrjT1wU56_YV8-DrFhzmfymuzbTZkxvz37BrQ7IQVJKZ_1or6bRiYxMBKgf9aogr8TkDDuRXbOvDC9iod4HO3QoI5mgJhjnX1XlRn5XKXqVKBmFK2YvU0BV7gQJYtXfb83_MbgwpuyY6bYjcQeA-iBDAMwkb2bcbQTfAqAcVrsbGdjTP1uYDUJz7rXQnpCo_UN6G0tqg385kaq9OQHs32xhQK9Mrc261J_tS-eRmyFE.Qy0PzbE2aZqt6d2XsY3-UA\" } }' Response { \"AuthenticationResult\": { \"AccessToken\": \"eyJraWQiOiJ1Wnh4cHB2VGVvVFJURWZxeGpnZU1OVHd1XC9oQld3U29xMThOa2duQ0xvZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJldmVudF9pZCI6IjQ4MDM0ODUwLTVmZTktNDgzYy1hYzExLTRkYWJkOThkMDk5OSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImV4cCI6MTYxMTg1ODIyNSwiaWF0IjoxNjExNzcxODI1LCJqdGkiOiJjODEwMzg2YS0zM2JhLTQ0MDMtODc3Yy1iYzdkMGQ5OWMwNmYiLCJjbGllbnRfaWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwidXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYifQ.MWhjLH_GZ_Q69_ynrnQDoluFQtyA97Ny1RhMnGWika8IvjDMwmgnxrfpgipPyLXp61e4Hv6LIPTIv6LiQuRB9uPrNYaO--ueFUwwx94qAm_WusHIRzO8OxfGzjiwpfKzJM7Sn4nvzj3xEsFkLJauf1kSK2Kv2a3MyLl4JyReSOR0YOq-x-bWdlWs6anNcCdwxzD53CrKrzlS95KjYV1v2k_XCPmqUOI_WawZEHvNjrLzO16ynKBZLqXRTAwS7N-ddlG5NZ-4iNGurpzoQtO5JqMCtoIuK1H4EAWyIYP77jod1EbYdOxxnq6RS1axuNSoffeXNYWVW6qjxbA4qd8VtA\", \"ExpiresIn\": 86400, \"IdToken\": \"eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTE4NTgyMjUsImlhdCI6MTYxMTc3MTgyNSwiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.j89jyW7nQctKTmHfeouj9GMU_v6zhPTHs2lr0Rw-c_hfewtSA-fWh7ayZnwyW-GljUNbnQ-vxvS5_0aIL9uOeb7dXNE2VbG1pHljNPX_IvZ21-g_y9hzoOw-l8vr2PdzB9Cr1FvY8TfMcFEpQRpy6RqpMEIgrNgZOWYzHOiX7BI_c9-tGuLoeoThe-BLCRlxhF4EvKccEUP7pwRxg9mX-BfFLAhRmnqX8iyN-1hcNMxqARaBOmYTg-XChP57iyPgJRidtBW68_KtVzmTFDWzE-U3v6MntjChCOefNLpy_W7dP4BeCFuiv5lQ_JkPK6hLhwbnb_Bml1BdCgoP46nURw\", \"TokenType\": \"Bearer\" } } Errors # NotAuthorizedException : Invalid Refresh Token","title":"Authentication"},{"location":"authentication/#genies-avatar-authentication","text":"","title":"Genies Avatar Authentication"},{"location":"authentication/#modes-of-authenticating-a-user","text":"There are multiple ways of linking a user with their Genies Avatar: Using the pre-built Sign Up/Sign In forms in the Genies Avatar Creator Creating custom anonymous users (requires Genies approval)","title":"Modes of authenticating a user"},{"location":"authentication/#using-the-genies-avatar-creator","text":"The easiest way to link your users with their Genies Avatar is to use the Avatar Creator When using the Avatar Creator users can create an Avatar Account and associate their personal avatar with it. Every Avatar created this way will get an associated UserId that needs to be stored and associated with the user of the Partner app.","title":"Using the Genies Avatar Creator"},{"location":"authentication/#using-anonymous-managed-user-accounts","text":"Another way of linking users with their Genies Avatar is using a Partner API Account to create managed user accounts. The managed user accounts are anonymous and all user data is opaque to Genies (no personal user data is sent to Genies). For more information about using the Partner API Account check the Managed Users section","title":"Using anonymous managed user accounts"},{"location":"authentication/#the-partner-api-account","text":"In order to created managed accounts for your users, you need to request specific access to this feature while applying for your Partner Account . When approved access to the managed accounts feature, you'll receive credentials for a Partner API Account .","title":"The Partner API Account"},{"location":"authentication/#partner-api-account-authentication","text":"In order to manage anonymous user accounts you need to authenticate with your provided Partner API Account credentials and get the associated IdToken and RefreshToken . Genies provides multiple ways of authenticating your Partner API Account: HTTP requests Android API wrapper library iOS wrapper","title":"Partner API Account Authentication"},{"location":"authentication/#idtoken-and-refreshtoken","text":"The IdToken is used to authenticate all requests made by the Partner to the Avatar API and the Anonymous Users API . It's usually sent as part of the Authorization header. The RefreshToken is used to authenticate all interactions with the Avatar Creator The IdToken and RefreshToken are provided when signing in with a Partner API account","title":"IdToken and RefreshToken"},{"location":"authentication/#partner-api-account-http-authentication","text":"The Avatar Authentication API uses AWS Cognito to handle authentication. The IdToken provided by the authentication flow is used to authenticate all the subsequent actions with the Avatar API.","title":"Partner API Account HTTP Authentication"},{"location":"authentication/#http-request-url","text":"The Authentication API URL is: https://cognito-idp.us-west-2.amazonaws.com/","title":"HTTP Request URL"},{"location":"authentication/#requests-and-response-formats","text":"The Avatar Authentication API uses HTTP POST requests with JSON arguments and JSON responses","title":"Requests and response formats"},{"location":"authentication/#http-header-contents","text":"The Avatar Authentication API requires the following information in the headers of an HTTP request: Content-Type Specifies JSON and the version, for example, Content-Type: application/x-amz-json-1.0 X-Amz-Target Specifies the Cognito Action type, for example: 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth'","title":"HTTP Header Contents"},{"location":"authentication/#http-request-body","text":"The Avatar API requests require the request body to be sent in JSON format.","title":"HTTP Request Body"},{"location":"authentication/#http-responses","text":"The Avatar API requests include JSON-formatted data in the response","title":"HTTP Responses"},{"location":"authentication/#errors","text":"When you send requests to and get responses from the Authentication API, you might encounter two types of API error: Client errors : Client errors are indicated by a 4xx HTTP response code. Client errors indicate that Authentication API found a problem with the client request, such as an authentication failure or missing required parameters. Server errors : Server errors are indicated by a 5xx HTTP response code, and need to be resolved by the Amazon Cognito service For each API error, the Authentication API returns the following values: A status code , for example, 400 An error code , for example, ValidationException An error message , for example, 1 validation error detected: Value at 'password' failed to satisfy constraint: Member must have length greater than or equal to 6","title":"Errors"},{"location":"authentication/#partner-api-account-sign-in","text":"To use your Partner API Account you should sign in and get the IdToken used to authenticate all other Avatar SDK interactions. To sign in you should use the X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth action header and POST a JSON containing the AuthFlow key set to USER_PASSWORD_AUTH and an AuthParameters object with the USERNAME and PASSWORD keys. Example curl --location --request POST 'https://cognito-idp.us-west-2.amazonaws.com/' \\ --header 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth' \\ --header 'Content-Type: application/x-amz-json-1.1' \\ --data-raw '{ \"AuthFlow\": \"USER_PASSWORD_AUTH\", \"ClientId\": \"YOUR_CLIENT_ID\", \"AuthParameters\": { \"USERNAME\": \"testuser@genies.com\", \"PASSWORD\": \"exampleToughPassword\" } }' Response HTTP/1.1 200 OK Date: Thu, 21 Jan 2021 18:39:38 GMT Content-Type: application/x-amz-json-1.1 Content-Length: 3879 Connection: keep-alive x-amzn-RequestId: 0d716321-5de1-4a8a-87cf-6aca1aa47c89 { \"AuthenticationResult\": { \"AccessToken\": \"eyJraWQiOiJ1Wnh4cHB2VGVvVFJURWZxeGpnZU1OVHd1XC9oQld3U29xMThOa2duQ0xvZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJiNDRmYWEyZS0wMGI1LTQ5ZjItOWZiNC03ZWNjZTEzZjU0OGUiLCJldmVudF9pZCI6IjA2NjNlNWIxLTMxNTctNDEzNC04MmYzLWE4NGUwZGNiNGQyYiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2MTEyNTQwNTEsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImV4cCI6MTYxMTM0MDQ1MSwiaWF0IjoxNjExMjU0MDUxLCJqdGkiOiI4YTlkMjBhMS01YmRjLTQ0NDMtOTBmOC1mYjBkYzI4YTI2YWMiLCJjbGllbnRfaWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwidXNlcm5hbWUiOiJiNDRmYWEyZS0wMGI1LTQ5ZjItOWZiNC03ZWNjZTEzZjU0OGUifQ.lcCE3siEZ8xIwsWkmc4GYvM8f6kDSR2rjY4bKvYe9HbEZXZUke6E4CfpJ6cM3lMpRqTTO4EEd3icIpqdKvBdtR_lxlk-OFxu20oQIuvhiFLaj_519OUCQL3PkasrvBiSHmjz56HaSTRoyzIfLUMBpGJjQnzmeq8PLmSQXw1i1jgyQjRViRLdPMP3ShpXQBnCSamgsnI0yhKMC7SDz5qwnenQm6DwqIHB43lcqDLmaB2T1JtlKnjmD7WG0jaDEMdED3k70iW6mDEOKBOi4-GSeRzRwsnl9uXDDManOogPBKz2Gjr_feGPFeQxF3N65DxRh3DNlObEpq4dPD_OUvkGHA\", \"ExpiresIn\": 86400, \"IdToken\": \"eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJiNDRmYWEyZS0wMGI1LTQ5ZjItOWZiNC03ZWNjZTEzZjU0OGUiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJldmVudF9pZCI6IjA2NjNlNWIxLTMxNTctNDEzNC04MmYzLWE4NGUwZGNiNGQyYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjExMjU0MDUxLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiYjQ0ZmFhMmUtMDBiNS00OWYyLTlmYjQtN2VjY2UxM2Y1NDhlIiwiZXhwIjoxNjExMzQwNDUxLCJpYXQiOjE2MTEyNTQwNTEsImVtYWlsIjoidGVtcG9yYXJ5QGdlbmllcy5jb20ifQ.BcqX5bviYoWDOO1dRd45xoJhPJFIEjFnJNaJYXcoomGob-RNn1MNIXr6qK4IcStX_0-EDjj7O7os5Psnq1Jyk3SOABUKyj1ThnAVBYXzfHAYSj5Q7n9D5wFh4rS1hnmkLQBw0ENNxwaf_sCuQh3x9M00bAy3gOH3Y4IPOCwN7T5n1_1x7TiZEZ1nXeZeSUUJnyzh63xpeB1XLtoBF1B2Sc3bfZQcF93hNGFKspxD5_wvX0dWNuMUr-xXDMSfG8L80p9CorkWEhmLCC7AKC2qK-YVJUcKScRS_kbM-Y0CUD0dRn6pmx8RG2D3-wJRonY2STV3ehWeYx17rA3gpl-c5g\", \"RefreshToken\": \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.BfxMdVNFP7f6W35WUlvihLhCPotJVoXPOHAP1GzU-UHT6WC8KbAFjT77UW22SlOQDlViUz-ykFBZmcYi44LSc9LGaFSPoOYsPpmRkzONqKlk9K9pJ2Wv8t_GaTKc7N5LxBefUpmdgVordpc4LWsJR0JhslR0yh7JsOLZtQ6AahEIzeecLdiBvIgCFpxE-RlqIc34FD_jikwfo6-j0_bFsmptl6BASJhN-K8OZuGXQWhzjjdvKi_h-tkqg2HuSDk52k2LRlg_iGWPoyFUomeWKn_02U1z0ojXjC9OV34u0Wgpmk_hpE34YXs-8fHkRP50YBV-iR4D8qMCdRALJvpYrQ.OlwZ35YXQ7OR5swV.6A7mLSo82yqTlaGRRTtDEklVBgjShZyvtkAqJr4sZ-ec3QqK_OZWWMsMTAIvcGHGxD1CTjZ7ZxFLgmGi17UkylknHmjkV0XzxGUFKMA_mMQcJpXOg58QTlLa2bdC_CAM7hFddZAHGsH7yJd4aZ_h-Bk2FQKlumDYSPufXm_GgJNCINKxzYofEK-GoZP38WO4PiSxuzhxbxPnWTxgbKJZjGhRwqzkYbPNnKLKhnV-qd7o57MrMRNaBUaLvNFJLTpsqJ8hDKDVl5BlkirLgBymQegkkQ4vjmBcfuASwMjALzjqmZpokoZ5ledGOn0lcTMKGRbKGe-x5AtnCFxduCwWJwQFoJgVa38wGrvo7_NUDTVEE_t3L-EwtlEXbOXkVOi8zdxWlsACQJhbTTpJKhJT9eAjhwKF-hkREwMgf7CyVddN-6oYMbPZiTWzkHxDetc03btRoI2iRfxUvwJ3IT59yX_QrNx4KG_Qr7RT3-bEOkBRO6j8PxB2-p79s86Wr4ExuNSo7_mTM2xoXNzp13kDjDAVx1tuyHv8xi6gM7IV4Ly82BroknTxL8vnurbLhQq38ZUNXtixajBPv2KvSBKtdojzq-v0SZn9BNdC66Nl3vEPA3yAOjcta3ehq_JixKC1Cf2dZ4xGfUBOSyXiTXBKZUMsXwesTQqzjZcgEOctAlVITuBhOJ3M78BxHlu-JBHTaxoERsnu3QJT0CN2juyyEZrTubkEhxhu97W_97eXj7AbrwqOIdEAPa8euA-2KpL4W8Fw3go-wyEEqa_ilobotygEomgo-Ql504wqsLAr7NOZEa5FU13kZ939jqEnkLCiIpsyDul0Z37FzbglOvzqykmW2XXyHOVMnSFuzKJI30hJ1txUftrzwZoXRU2_vP2cDN1bv8zYaTYUWkT-nVwGze57AGHkj9m-7Y-KqXYU5W4yPLCQzY9EeBqwXX34AscbpaxbuUONQjRtUpQjqXaZRqFnc-nPI5hoqYKjvR8FwjYDCO7huf9PCgl1oB2VR2m1s6N2CscFg2YAGZlSOJvlxlT3P9qytGYYK1-2ce1AfI2RLg6rurCgbqnFFfBSeqgTr48G95kWhYMlk1k28xs3DBmvNqbrsXrMmk2ZGcpy_TvA58-T-x5TPMo7bpPOSzPcGoJLadpVDv7lTuaUc8CY7L3Un1A1wifiJpY-O7d3wP8Jbmiq3b9NS2sB76h8t8ifVfZcbE20ECI_1-tD6Vw9lhYa6e3Vw3xNPLej0O6xWNR4EAgRKjcYikqfrkHhuWU-cCX513WiVRpoLl-9SS5pqELlLjYR2BJeV7-kVXE0Ly8jePcFut6GcE1P.miEFKs02GC-tXwUmvk0faw\", \"TokenType\": \"Bearer\" }, \"ChallengeParameters\": {} }","title":"Partner API Account Sign In"},{"location":"authentication/#errors_1","text":"NotAuthorizedException : Incorrect username or password.","title":"Errors"},{"location":"authentication/#refreshing-the-idtoken","text":"The IdToken provided when signing in expires after 1 day and needs to be refreshed using the RefreshToken . The RefreshToken has a validity of 30 days. To refresh the tokens you should POST a JSON containing the AuthFlow key set to REFRESH_TOKEN_AUTH and a AuthParameters object containing the RefreshToken . Example curl --location --request POST 'https://cognito-idp.us-west-2.amazonaws.com/' \\ --header 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth' \\ --header 'Content-Type: application/x-amz-json-1.1' \\ --data-raw '{ \"AuthFlow\": \"REFRESH_TOKEN_AUTH\", \"ClientId\": \"YOUR_CLIENT_ID\", \"AuthParameters\": { \"REFRESH_TOKEN\": \"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.RsNP_jdQ-ocBqevwXhpd_mYX2353asFU1ct2yKAnNqTycxxy5mAyTxEX2-60AjxPYmnXLA3l4P9FyKWyPenuYMt0fMIXJZjJ62ZYuKbnIaSBKFSdQPzDCEqCzaQr-vhdJEux4gwMkvnq0Medw7R-RokR3Y_vpl-XGPz3XKKSYycfNxW4YQQ5hlkAoX7Ni4ocMhVLE7hvw49aFWC4mVwmCmpacegMJDepTfTG5mtCt77VtlL3ZwWgXTEX8QTX9EIbDiFJ8k4lks6o8Ci99Spe-epvOrDyW7ZSov5j8ZYzCU7i6w7nJwwIAleFxBg-ogC6_vR4770CvDe1ygn2SQ0N4Q.Nz-pgOpahA145FWq.I9uxAY5V1X1QpIF4LeeToJcon27To5goGq-V7JpLLE-ou0OCl55cQgZxqvc6jspeIkyTQzwPQpmbIqv15UPMptM_qXQQp-6HT7LiL84GnIHL-nUe2wyyYvpvZpTxmLvbnIyEqxjLKjm_gALmDCL9Vb4mMa7Y504xwlqcutpogVLJFO2aMoShE5FrknYI6A2QbJPmpA9VJerxF3lfagCrxE5_u0gVIQWNxCvLfCklRnP5GArTlzhari3UnCW63Z0yf6_jHKe0NvdzFzgRZzD88j7yPZJvIZOVBKpv3PJ3k_6oVwm4A5wHNoF9UkLuWElPcywj7cwb8FcAV5rPDYxhSGqUBXCC2yrSteDS3gXq4xGRp6kJSQaTN9vfxYNpl_JcVlipEy3b5Lk5yEarxrEP5bmEaAhVzLzfvWkBcUrC5rXyPC83quojjj8_lKTFgVQabiO83j4Vi_2aYS7AIxeN5OdoHQ1qH50MeBU6ro6wZp8Gn_Qp8r9a6RR9ccrMnU-P87TEjcMsPssczu2rYllGK7eFsGthHKUNDIZEywT5LIyFuwvk1Ig8uRKzE2MmpARVv05LsshJyqLglXnIMTuwuPI4vxWtt-9SMwaFR5ZjCha-l-Vrnw5680j08sqchMeP6tRPET6U-CXITt6OAp68j8D6OdHdRYxT8uMCC8NZs-_1VF33sOzvLBYQFeZ34M2H2TeSSldlufIt-bxVWvKen26ogWHFa5RF5913qt-st3SNYwX2v0UCnbk-pODAkmIe-5cCOPw-KKzJQphfBluzAa-CfdkRGOtT0wDp8h58-If4y9nefOtKmvRW-lykpSTrgASWLsXvkn5W1cK--VU5sVpz9dCFMG-LpsZCSSqmdMgEZosbPP3NsUkhpBSJ6oZaEby_qdHw72v-0gtxWl5y-zGNvoYG0-GiJC6MUdX2GyKLJCi4Vf-EpGV3HxiA3FGVR6eurjRq6ZYBaXBRTXD7PIR1I12TacEy6j97kAoW82WFvF5wImnQHHjk7lUc_7fR5OQHtsAq2peIaKU5jylHQY7jhtLRJiiAqCKK18XRRgJeZNTVNcg5wlOiZ9eaMAN-9_YBgZCW4SzAJsrjT1wU56_YV8-DrFhzmfymuzbTZkxvz37BrQ7IQVJKZ_1or6bRiYxMBKgf9aogr8TkDDuRXbOvDC9iod4HO3QoI5mgJhjnX1XlRn5XKXqVKBmFK2YvU0BV7gQJYtXfb83_MbgwpuyY6bYjcQeA-iBDAMwkb2bcbQTfAqAcVrsbGdjTP1uYDUJz7rXQnpCo_UN6G0tqg385kaq9OQHs32xhQK9Mrc261J_tS-eRmyFE.Qy0PzbE2aZqt6d2XsY3-UA\" } }' Response { \"AuthenticationResult\": { \"AccessToken\": \"eyJraWQiOiJ1Wnh4cHB2VGVvVFJURWZxeGpnZU1OVHd1XC9oQld3U29xMThOa2duQ0xvZz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJldmVudF9pZCI6IjQ4MDM0ODUwLTVmZTktNDgzYy1hYzExLTRkYWJkOThkMDk5OSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImV4cCI6MTYxMTg1ODIyNSwiaWF0IjoxNjExNzcxODI1LCJqdGkiOiJjODEwMzg2YS0zM2JhLTQ0MDMtODc3Yy1iYzdkMGQ5OWMwNmYiLCJjbGllbnRfaWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwidXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYifQ.MWhjLH_GZ_Q69_ynrnQDoluFQtyA97Ny1RhMnGWika8IvjDMwmgnxrfpgipPyLXp61e4Hv6LIPTIv6LiQuRB9uPrNYaO--ueFUwwx94qAm_WusHIRzO8OxfGzjiwpfKzJM7Sn4nvzj3xEsFkLJauf1kSK2Kv2a3MyLl4JyReSOR0YOq-x-bWdlWs6anNcCdwxzD53CrKrzlS95KjYV1v2k_XCPmqUOI_WawZEHvNjrLzO16ynKBZLqXRTAwS7N-ddlG5NZ-4iNGurpzoQtO5JqMCtoIuK1H4EAWyIYP77jod1EbYdOxxnq6RS1axuNSoffeXNYWVW6qjxbA4qd8VtA\", \"ExpiresIn\": 86400, \"IdToken\": \"eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImV2ZW50X2lkIjoiNDgwMzQ4NTAtNWZlOS00ODNjLWFjMTEtNGRhYmQ5OGQwOTk5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2MTE3NzE3OTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy13ZXN0LTIuYW1hem9uYXdzLmNvbVwvdXMtd2VzdC0yX0VoYnRyRmlFViIsImNvZ25pdG86dXNlcm5hbWUiOiJhNDgyY2UzMy1jODRiLTQ4YzAtODFmYy1lZGQxZTVmMGVhZTYiLCJleHAiOjE2MTE4NTgyMjUsImlhdCI6MTYxMTc3MTgyNSwiZW1haWwiOiJyaGFkb296b296KzFAZ21haWwuY29tIn0.j89jyW7nQctKTmHfeouj9GMU_v6zhPTHs2lr0Rw-c_hfewtSA-fWh7ayZnwyW-GljUNbnQ-vxvS5_0aIL9uOeb7dXNE2VbG1pHljNPX_IvZ21-g_y9hzoOw-l8vr2PdzB9Cr1FvY8TfMcFEpQRpy6RqpMEIgrNgZOWYzHOiX7BI_c9-tGuLoeoThe-BLCRlxhF4EvKccEUP7pwRxg9mX-BfFLAhRmnqX8iyN-1hcNMxqARaBOmYTg-XChP57iyPgJRidtBW68_KtVzmTFDWzE-U3v6MntjChCOefNLpy_W7dP4BeCFuiv5lQ_JkPK6hLhwbnb_Bml1BdCgoP46nURw\", \"TokenType\": \"Bearer\" } }","title":"Refreshing the IdToken"},{"location":"authentication/#errors_2","text":"NotAuthorizedException : Invalid Refresh Token","title":"Errors"},{"location":"avatar_creator/","text":"Avatar Creator # The Avatar Creator is a SDK component that lets the user build their own personalized Avatar. The Avatar Creator is a Unity plugin made available through an Android Library and an iOS Library. Android # To make the Avatar Creator easier to integrate in your Android App we created a library: https://github.com/geniesinc/android-composer-library Integration # To integrate the Avatar Creator library follow these steps: Open build.gradle (project) file and add to allprojects/repositories: maven { url 'https://jitpack.io' credentials { username authToken } } Open gradle.proprties and add: authToken={{YOUR_AUTH_TOKEN}} The authToken will be provided when applying for a Partner Account . Open build.gradle (Module: app) file. Add to dependencies: implementation 'com.github.geniesinc:android-composer-library:0.0.11' Open strings.xml and add: Avatar Creator The Avatar Creator needs to be loaded in a separate activity with a dedicated process attached. The Avatar Creator Unity plugin kills the current process when it unloads. In the activity, to add the Avatar Creator view: val composerCallback = object: GeniesComposerLoader.ComposerCallback { override fun onComposerLoaded() { Log.d(TAG, \"Composer loaded\") pb_loading.visibility = View.GONE } override fun onComposerUnloaded() { Log.d(TAG, \"Composer unloaded\") } } GeniesComposerLoader.loadGeniesComposerIntoView( parentView = composer_container, lifecycleOwner = this, credentialsJson = testCredentials, composerCallback = composerCallback ) The credentialsJson should be a JSON String containting: the user userId the Partner's API Account Refresh Token the Partner's API Key provided when applying for the Partner Account Example { userId: {{AVATAR_USER_ID}}, refreshToken: {{PARTNER_API_ACCOUNT_REFRESH_TOKEN}}, apiKey: {{PARTNER_API_KEY}} } Callbacks # When loading the Avatar Creator you can supply a GeniesComposerLoader.ComposerCallback . onComposerLoaded() getts called when the Avatar Creator finishes loading the user Avatar and is ready to be visible on screen. onComposerUnloaded() getts called when a user action (SAVE, QUIT) triggers the closing of the Avatar Creator. iOS # Installation # You can install the iOS Genies Avatar library via Cocoapods : Add pod \"GeniesAvatarKit\", git: \"https://github.com/geniesinc/GeniesAvatarKit.git\" (proper github credentials are required) Disable Bitcode in XCode project settings - In XCode go to your project settings > Build Settings > Make sure All is selected and search for bitcode - Set it to Enabled = No In AppDelegate add the following: import Foundation import UIKit import GeniesAvatarKit // Required import MachO @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { window = UIWindow ( frame : UIScreen . main . bounds ) // Add the following: UnityLoader . setHostMainWindow ( window ) UnityLoader . setLaunchOptions ( launchOptions ) let machineHeader = UnsafeMutablePointer < mach_header_64 >. allocate ( capacity : 1 ) machineHeader . pointee = _mh_execute_header UnityLoader . machineHeader = machineHeader window ?. rootViewController = StartViewController () window ?. makeKeyAndVisible () return true } } Loading # Loading the composer is then done anywhere in the app by using UnityLoader.loadComposerWithCredentials : func loadUserInUnity ( _ user : AvatarAPIClient . User ) { guard let refreshToken = AvatarAppState . shared . credentials ?. refreshToken else { print ( \"Error: The refresh token does not exist\" ) return } let credentials = AvatarComposerCredentials ( userId : user . userId , refreshToken : refreshToken , apiKey : AvatarAppState . shared . client . apiConfig . apiKey ) guard let jsonCredentialsString = credentials . jsonString else { print ( \"Error: Cannot create composer credentials JSON\" ) return } UnityLoader . loadComposerWithUserCredentials ( jsonCredentialsString ) { UnityLoader . showUnity () } } You can read more about the AvatarAppState object here Unloading # Unloading the composer is done via UnityLoader.hideUnity()","title":"Avatar Creator"},{"location":"avatar_creator/#avatar-creator","text":"The Avatar Creator is a SDK component that lets the user build their own personalized Avatar. The Avatar Creator is a Unity plugin made available through an Android Library and an iOS Library.","title":"Avatar Creator"},{"location":"avatar_creator/#android","text":"To make the Avatar Creator easier to integrate in your Android App we created a library: https://github.com/geniesinc/android-composer-library","title":"Android"},{"location":"avatar_creator/#integration","text":"To integrate the Avatar Creator library follow these steps: Open build.gradle (project) file and add to allprojects/repositories: maven { url 'https://jitpack.io' credentials { username authToken } } Open gradle.proprties and add: authToken={{YOUR_AUTH_TOKEN}} The authToken will be provided when applying for a Partner Account . Open build.gradle (Module: app) file. Add to dependencies: implementation 'com.github.geniesinc:android-composer-library:0.0.11' Open strings.xml and add: Avatar Creator The Avatar Creator needs to be loaded in a separate activity with a dedicated process attached. The Avatar Creator Unity plugin kills the current process when it unloads. In the activity, to add the Avatar Creator view: val composerCallback = object: GeniesComposerLoader.ComposerCallback { override fun onComposerLoaded() { Log.d(TAG, \"Composer loaded\") pb_loading.visibility = View.GONE } override fun onComposerUnloaded() { Log.d(TAG, \"Composer unloaded\") } } GeniesComposerLoader.loadGeniesComposerIntoView( parentView = composer_container, lifecycleOwner = this, credentialsJson = testCredentials, composerCallback = composerCallback ) The credentialsJson should be a JSON String containting: the user userId the Partner's API Account Refresh Token the Partner's API Key provided when applying for the Partner Account Example { userId: {{AVATAR_USER_ID}}, refreshToken: {{PARTNER_API_ACCOUNT_REFRESH_TOKEN}}, apiKey: {{PARTNER_API_KEY}} }","title":"Integration"},{"location":"avatar_creator/#callbacks","text":"When loading the Avatar Creator you can supply a GeniesComposerLoader.ComposerCallback . onComposerLoaded() getts called when the Avatar Creator finishes loading the user Avatar and is ready to be visible on screen. onComposerUnloaded() getts called when a user action (SAVE, QUIT) triggers the closing of the Avatar Creator.","title":"Callbacks"},{"location":"avatar_creator/#ios","text":"","title":"iOS"},{"location":"avatar_creator/#installation","text":"You can install the iOS Genies Avatar library via Cocoapods : Add pod \"GeniesAvatarKit\", git: \"https://github.com/geniesinc/GeniesAvatarKit.git\" (proper github credentials are required) Disable Bitcode in XCode project settings - In XCode go to your project settings > Build Settings > Make sure All is selected and search for bitcode - Set it to Enabled = No In AppDelegate add the following: import Foundation import UIKit import GeniesAvatarKit // Required import MachO @UIApplicationMain class AppDelegate : UIResponder , UIApplicationDelegate { var window : UIWindow ? func application ( _ application : UIApplication , didFinishLaunchingWithOptions launchOptions : [ UIApplication . LaunchOptionsKey : Any ]?) -> Bool { window = UIWindow ( frame : UIScreen . main . bounds ) // Add the following: UnityLoader . setHostMainWindow ( window ) UnityLoader . setLaunchOptions ( launchOptions ) let machineHeader = UnsafeMutablePointer < mach_header_64 >. allocate ( capacity : 1 ) machineHeader . pointee = _mh_execute_header UnityLoader . machineHeader = machineHeader window ?. rootViewController = StartViewController () window ?. makeKeyAndVisible () return true } }","title":"Installation"},{"location":"avatar_creator/#loading","text":"Loading the composer is then done anywhere in the app by using UnityLoader.loadComposerWithCredentials : func loadUserInUnity ( _ user : AvatarAPIClient . User ) { guard let refreshToken = AvatarAppState . shared . credentials ?. refreshToken else { print ( \"Error: The refresh token does not exist\" ) return } let credentials = AvatarComposerCredentials ( userId : user . userId , refreshToken : refreshToken , apiKey : AvatarAppState . shared . client . apiConfig . apiKey ) guard let jsonCredentialsString = credentials . jsonString else { print ( \"Error: Cannot create composer credentials JSON\" ) return } UnityLoader . loadComposerWithUserCredentials ( jsonCredentialsString ) { UnityLoader . showUnity () } } You can read more about the AvatarAppState object here","title":"Loading"},{"location":"avatar_creator/#unloading","text":"Unloading the composer is done via UnityLoader.hideUnity()","title":"Unloading"},{"location":"avatarapi/","text":"Avatar API WIP #","title":"Avatar API WIP"},{"location":"avatarapi/#avatar-api-wip","text":"","title":"Avatar API WIP"},{"location":"cloudrenderer/","text":"Cloud renderer WIP #","title":"Cloud renderer WIP"},{"location":"cloudrenderer/#cloud-renderer-wip","text":"","title":"Cloud renderer WIP"},{"location":"composer/","text":"","title":"Composer"},{"location":"gettingstarted/","text":"How to get started with the Genies Avatar SDK # Step one: Apply for a partner account # To start using the Genies Avatar SDK, you must first contact Genies and apply for a partner account at avatars@genies.com Step two: Save your API key # In your partner approval process you'll receive an API Key that will be used to authenticate your API requests. The API Key does not expire unless expressly regenerated. Step three: Start using the API # After you got your Avatar SDK approval and your API Key it's time to start integrating your project with the Avatar API starting with Authentication","title":"How to get started with the Genies Avatar SDK"},{"location":"gettingstarted/#how-to-get-started-with-the-genies-avatar-sdk","text":"","title":"How to get started with the Genies Avatar SDK"},{"location":"gettingstarted/#step-one-apply-for-a-partner-account","text":"To start using the Genies Avatar SDK, you must first contact Genies and apply for a partner account at avatars@genies.com","title":"Step one: Apply for a partner account"},{"location":"gettingstarted/#step-two-save-your-api-key","text":"In your partner approval process you'll receive an API Key that will be used to authenticate your API requests. The API Key does not expire unless expressly regenerated.","title":"Step two: Save your API key"},{"location":"gettingstarted/#step-three-start-using-the-api","text":"After you got your Avatar SDK approval and your API Key it's time to start integrating your project with the Avatar API starting with Authentication","title":"Step three: Start using the API"},{"location":"ios/","text":"iOS # Avatar Creator # For integrating the Avatar Creator in your Android App, see the Avatar Creator / iOS section Authentication & Avatar API wrapper library # The Authentication API wrapper library provides a convenient way to authenticate with your Partner API Account The iOS Avatar Authentication library can be found at: https://github.com/geniesinc/GeniesAvatarKit Installation # You can install the iOS Authentication library via Cocoapods : If you just want to use just the API Client: Add pod \"GeniesAvatarKit/AvatarAPIClient\", git: \"https://github.com/geniesinc/GeniesAvatarKit.git\" (proper github credentials are required) If you want to also use the Avatar Creator: Add pod \"GeniesAvatarKit\", git: \"https://github.com/geniesinc/GeniesAvatarKit.git\" (proper github credentials are required) Disable Bitcode in XCode project settings - In XCode go to your project settings > Build Settings > Make sure All is selected and search for bitcode - Set it to Enabled = No Usage # State # The SDK provides an AvatarAppState object for handling the Genies Avatar API, which will handle the session and API calls The AvatarAppState object is the central point of the SDK and requires an initialization with the configuration objects presented in Configuration . There should only be one instance of the AvatarAppState running throughout the app's lifecycle. The code samples below will reference this by AvatarAppState.shared , which should be a singleton instance of AvatarAppState Configuration # Configuring the AvatarAppState consists of 3 parts: One AvatarAPIConfig object, configured with an api key and a base URL for the Genies Avatar API. Example: AvatarAPIConfig ( apiKey : \"some-api-key\" , baseURL : URL ( string : \"https://avatar-api-dev.genies.com/dev\" ) ! ) One AvatarAWSConfig configured with client ID , AWS Region , username and password . Example: AvatarAWSConfig(clientID: \"some-client-id\", region: .usWest2, username: \"some-username\", password: \"some-password\") One AvatarCredentialsStore instance which should handle storing and getting credentials for communicating with the Genies Avatar API. The example app provides a predefined KeychainCredentialsStore which is used to manage credentials using the underlying iOS Keychain. If needed You can build your own credentials store by implementing the AvatarCredentialsStore protocol, which requires two methods: storeCredentials(_ credentials: AvatarClientCredentials) - should store the IdToken and refreshToken strings from the AvatarClientCredentials instance getStoredCredentials() - should provide an instance of AvatarClientCredentials that were previously stored, if any exists These methods are called automatically by the SDK Signing in with a Partner API Account # Signing in is done using the AvatarAppState shared instance: AvatarAppState . shared . signIn { result in switch result { case . success : // Sign in was successful case . failure ( let error ): // There was an error while signing in print ( error . localizedDescription ) } } Signing out from the Partner API Account is done by calling: AvatarAppState . shared . signOut () This operation will cleanup the internal state of the AvatarAppState instance, and you'll need to sign in again in order to use the Genies Avatar API. Getting a user by username # To get a user's userId use: AvatarAppState . shared . client . getUser ( username : username ) { result in switch result { case . success ( let user ): // Getting the user operation was successful // In this step you get a User object with userId and username string properties case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } } Getting an user's Avatar Closet # To get a list of all the assets assigned to a user's closet use: AvatarAppState . shared . client . getCloset ( userId : userId ) { result in switch result { case . success ( let closetItems ): // Getting the closet operation was successful // In this step you get a list of [ClosetItem] objects case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } } Depositing an asset to a user's closet # To deposit an asset to a user's closet use: AvatarAppState . shared . client . deposit ( userId : userId , assetId : assetId ) { result in switch result { case . success ( let closetItems ): // Depositing the closet item operation was successful // In this step you get a list of [ClosetItem] objects case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } } Withdrawing an asset from a user's closet # To withdraw an asset from a user's closet use: AvatarAppState . shared . client . withdraw ( userId : userId , assetId : assetId , instanceId : instanceId ) { result in switch result { case . success ( _ ): // Withdrawing the closet item operation was successful case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } } Creating an anonymous user # To create a managed anonymous user use: AvatarAppState . shared . client . createUser ( username ) { result in switch result { case . success ( let user ): // Creating the user operation was successful // In this step you get a User object case . failure ( let error ): // There was an error while creating the user print ( error . localizedDescription ) } } Deleting an anonymous user # To delete a managed anonymous user use: AvatarAppState . shared . client . deleteUser ( username ) { result in switch result { case . success ( _ ): // Deleting the user operation was successful case . failure ( let error ): // There was an error while deleting the user print ( error . localizedDescription ) } }","title":"iOS"},{"location":"ios/#ios","text":"","title":"iOS"},{"location":"ios/#avatar-creator","text":"For integrating the Avatar Creator in your Android App, see the Avatar Creator / iOS section","title":"Avatar Creator"},{"location":"ios/#authentication-avatar-api-wrapper-library","text":"The Authentication API wrapper library provides a convenient way to authenticate with your Partner API Account The iOS Avatar Authentication library can be found at: https://github.com/geniesinc/GeniesAvatarKit","title":"Authentication &amp; Avatar API wrapper library"},{"location":"ios/#installation","text":"You can install the iOS Authentication library via Cocoapods : If you just want to use just the API Client: Add pod \"GeniesAvatarKit/AvatarAPIClient\", git: \"https://github.com/geniesinc/GeniesAvatarKit.git\" (proper github credentials are required) If you want to also use the Avatar Creator: Add pod \"GeniesAvatarKit\", git: \"https://github.com/geniesinc/GeniesAvatarKit.git\" (proper github credentials are required) Disable Bitcode in XCode project settings - In XCode go to your project settings > Build Settings > Make sure All is selected and search for bitcode - Set it to Enabled = No","title":"Installation"},{"location":"ios/#usage","text":"","title":"Usage"},{"location":"ios/#state","text":"The SDK provides an AvatarAppState object for handling the Genies Avatar API, which will handle the session and API calls The AvatarAppState object is the central point of the SDK and requires an initialization with the configuration objects presented in Configuration . There should only be one instance of the AvatarAppState running throughout the app's lifecycle. The code samples below will reference this by AvatarAppState.shared , which should be a singleton instance of AvatarAppState","title":"State"},{"location":"ios/#configuration","text":"Configuring the AvatarAppState consists of 3 parts: One AvatarAPIConfig object, configured with an api key and a base URL for the Genies Avatar API. Example: AvatarAPIConfig ( apiKey : \"some-api-key\" , baseURL : URL ( string : \"https://avatar-api-dev.genies.com/dev\" ) ! ) One AvatarAWSConfig configured with client ID , AWS Region , username and password . Example: AvatarAWSConfig(clientID: \"some-client-id\", region: .usWest2, username: \"some-username\", password: \"some-password\") One AvatarCredentialsStore instance which should handle storing and getting credentials for communicating with the Genies Avatar API. The example app provides a predefined KeychainCredentialsStore which is used to manage credentials using the underlying iOS Keychain. If needed You can build your own credentials store by implementing the AvatarCredentialsStore protocol, which requires two methods: storeCredentials(_ credentials: AvatarClientCredentials) - should store the IdToken and refreshToken strings from the AvatarClientCredentials instance getStoredCredentials() - should provide an instance of AvatarClientCredentials that were previously stored, if any exists These methods are called automatically by the SDK","title":"Configuration"},{"location":"ios/#signing-in-with-a-partner-api-account","text":"Signing in is done using the AvatarAppState shared instance: AvatarAppState . shared . signIn { result in switch result { case . success : // Sign in was successful case . failure ( let error ): // There was an error while signing in print ( error . localizedDescription ) } } Signing out from the Partner API Account is done by calling: AvatarAppState . shared . signOut () This operation will cleanup the internal state of the AvatarAppState instance, and you'll need to sign in again in order to use the Genies Avatar API.","title":"Signing in with a Partner API Account"},{"location":"ios/#getting-a-user-by-username","text":"To get a user's userId use: AvatarAppState . shared . client . getUser ( username : username ) { result in switch result { case . success ( let user ): // Getting the user operation was successful // In this step you get a User object with userId and username string properties case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } }","title":"Getting a user by username"},{"location":"ios/#getting-an-users-avatar-closet","text":"To get a list of all the assets assigned to a user's closet use: AvatarAppState . shared . client . getCloset ( userId : userId ) { result in switch result { case . success ( let closetItems ): // Getting the closet operation was successful // In this step you get a list of [ClosetItem] objects case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } }","title":"Getting an user's Avatar Closet"},{"location":"ios/#depositing-an-asset-to-a-users-closet","text":"To deposit an asset to a user's closet use: AvatarAppState . shared . client . deposit ( userId : userId , assetId : assetId ) { result in switch result { case . success ( let closetItems ): // Depositing the closet item operation was successful // In this step you get a list of [ClosetItem] objects case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } }","title":"Depositing an asset to a user's closet"},{"location":"ios/#withdrawing-an-asset-from-a-users-closet","text":"To withdraw an asset from a user's closet use: AvatarAppState . shared . client . withdraw ( userId : userId , assetId : assetId , instanceId : instanceId ) { result in switch result { case . success ( _ ): // Withdrawing the closet item operation was successful case . failure ( let error ): // There was an error while getting the user print ( error . localizedDescription ) } }","title":"Withdrawing an asset from a user's closet"},{"location":"ios/#creating-an-anonymous-user","text":"To create a managed anonymous user use: AvatarAppState . shared . client . createUser ( username ) { result in switch result { case . success ( let user ): // Creating the user operation was successful // In this step you get a User object case . failure ( let error ): // There was an error while creating the user print ( error . localizedDescription ) } }","title":"Creating an anonymous user"},{"location":"ios/#deleting-an-anonymous-user","text":"To delete a managed anonymous user use: AvatarAppState . shared . client . deleteUser ( username ) { result in switch result { case . success ( _ ): // Deleting the user operation was successful case . failure ( let error ): // There was an error while deleting the user print ( error . localizedDescription ) } }","title":"Deleting an anonymous user"},{"location":"managed_users/","text":"Managed anonymous Avatar user accounts # Managed users are anonymous Avatar accounts created on a Partner's behalf. A managed user gets associated a random idenitifer int the form of the Avatar userId . To create anonymous Avatar users you need to have access to a Partner API Account Managing anonymous Avatar users can be done through the Android Library , the iOS Library or through HTTP Requests . Making HTTP requests # The Assets API URL is: https://composer-api-dev.genies.com/{{stage}} Stage # The stage represents the API version. The current stage version of the API is v1 . For testing purposes the stage should be set to dev e.g.: https://composer-api-dev.genies.com/dev Authenticating requests # Request authentication is done by including the x-api-key: {{SDK_PARTNER_API_KEY}} header and the Authorization: Bearer {{ID_TOKEN}} header API KEY # The SDK_PARTNER_API_KEY is provided for the SDK Partner when applying for a partner account For testing purposes the SDK_PARTNER_API_KEY in the x-api-key header should be set to defaultapikey-dev-0123456789 ID TOKEN # The ID_TOKEN needed when authenticating the requests is the IdToken provided when you Sign In with your Partner API Account Errors # When you send requests to and get responses from the Assets API, you might encounter two types of API error: Client errors : Client errors are indicated by a 4xx HTTP response code. Client errors indicate that Assets API found a problem with the client request, such as an authentication failure or missing required parameters. Server errors : Server errors are indicated by a 5xx HTTP response code, and need to be resolved by the team at Genies For each API error, the Authentication API returns the following values: A status code , for example, 400 An error message , for example, Access Denied Example { \"Message\": \"Access Denied\" } Creating an Anonymous Avatar User # To create an anonymous Avatar user call POST https://composer-api-dev.genies.com/{{stage}}/user and provide a username in the request body. The userId in the response is a random identifier associated with the created user. The userId should be saved and associated with your internal user account Example curl --location --request POST 'https://composer-api-dev.genies.com/dev/user' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"username\": \"funkyuser\" }' Response { \"userId\" : \"8b3f002d-3552-4f82-8a8e-6017a1b454d1\" , \"username\" : \"funkyuser\" } Getting the userId for an anonymous user # To get the associated userId for a user call GET https://composer-api-dev.genies.com/{{stage}}/user?username={{username}} The username should be the same username provided when creating the anonymous Avatar user . Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/user?username=funkyuser' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' Response [ { \"userId\" : \"8b3f002d-3552-4f82-8a8e-6017a1b454d1\" , \"username\" : \"funkyuser\" } ] Deleting an anonymous user # Deleting an anonymous user will destroy the user's ability to access their Avatar To delete an anonymous user call DELETE https://composer-api-dev.genies.com/{{stage}}/user/{{userId}} The {{userId}} should be the userId provided when creating the anonymous user. Example curl --location --request DELETE 'https://composer-api-dev.genies.com/dev/user/8b3f002d-3552-4f82-8a8e-6017a1b454d1' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' Response The response is empty. Getting a list of users # You can get a list of list of anonymous users created on behalf of your Partner API Account. To get the user list call GET https://composer-api-dev.genies.com/{{stage}}/user Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/user?username=funkyuser' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' Response The first user in the list will always represent the Partner API user account and will be have the \"groups\": [\"app\"] property. [ { \"userId\" : \"42426328-3057-45ee-a6ac-168efcd78d71\" , \"groups\" : [ \"app\" ], \"emailVerified\" : false , \"email\" : \"demo_partner_api_account@genies.com\" }, { \"userId\" : \"6f3c6283-a102-4e33-8058-c1a0aa02feb6\" , \"parentUserId\" : \"42426328-3057-45ee-a6ac-168efcd78d71\" , \"username\" : \"funkyuser\" }, { \"userId\" : \"17af0ade-cb1c-42ad-8518-e5e94b701267\" , \"parentUserId\" : \"42426328-3057-45ee-a6ac-168efcd78d71\" , \"username\" : \"deadbeef\" }, ... ... ... ]","title":"Managed Anonymous Users"},{"location":"managed_users/#managed-anonymous-avatar-user-accounts","text":"Managed users are anonymous Avatar accounts created on a Partner's behalf. A managed user gets associated a random idenitifer int the form of the Avatar userId . To create anonymous Avatar users you need to have access to a Partner API Account Managing anonymous Avatar users can be done through the Android Library , the iOS Library or through HTTP Requests .","title":"Managed anonymous Avatar user accounts"},{"location":"managed_users/#making-http-requests","text":"The Assets API URL is: https://composer-api-dev.genies.com/{{stage}}","title":"Making HTTP requests"},{"location":"managed_users/#stage","text":"The stage represents the API version. The current stage version of the API is v1 . For testing purposes the stage should be set to dev e.g.: https://composer-api-dev.genies.com/dev","title":"Stage"},{"location":"managed_users/#authenticating-requests","text":"Request authentication is done by including the x-api-key: {{SDK_PARTNER_API_KEY}} header and the Authorization: Bearer {{ID_TOKEN}} header","title":"Authenticating requests"},{"location":"managed_users/#api-key","text":"The SDK_PARTNER_API_KEY is provided for the SDK Partner when applying for a partner account For testing purposes the SDK_PARTNER_API_KEY in the x-api-key header should be set to defaultapikey-dev-0123456789","title":"API KEY"},{"location":"managed_users/#id-token","text":"The ID_TOKEN needed when authenticating the requests is the IdToken provided when you Sign In with your Partner API Account","title":"ID TOKEN"},{"location":"managed_users/#errors","text":"When you send requests to and get responses from the Assets API, you might encounter two types of API error: Client errors : Client errors are indicated by a 4xx HTTP response code. Client errors indicate that Assets API found a problem with the client request, such as an authentication failure or missing required parameters. Server errors : Server errors are indicated by a 5xx HTTP response code, and need to be resolved by the team at Genies For each API error, the Authentication API returns the following values: A status code , for example, 400 An error message , for example, Access Denied Example { \"Message\": \"Access Denied\" }","title":"Errors"},{"location":"managed_users/#creating-an-anonymous-avatar-user","text":"To create an anonymous Avatar user call POST https://composer-api-dev.genies.com/{{stage}}/user and provide a username in the request body. The userId in the response is a random identifier associated with the created user. The userId should be saved and associated with your internal user account Example curl --location --request POST 'https://composer-api-dev.genies.com/dev/user' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"username\": \"funkyuser\" }' Response { \"userId\" : \"8b3f002d-3552-4f82-8a8e-6017a1b454d1\" , \"username\" : \"funkyuser\" }","title":"Creating an Anonymous Avatar User"},{"location":"managed_users/#getting-the-userid-for-an-anonymous-user","text":"To get the associated userId for a user call GET https://composer-api-dev.genies.com/{{stage}}/user?username={{username}} The username should be the same username provided when creating the anonymous Avatar user . Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/user?username=funkyuser' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' Response [ { \"userId\" : \"8b3f002d-3552-4f82-8a8e-6017a1b454d1\" , \"username\" : \"funkyuser\" } ]","title":"Getting the userId for an anonymous user"},{"location":"managed_users/#deleting-an-anonymous-user","text":"Deleting an anonymous user will destroy the user's ability to access their Avatar To delete an anonymous user call DELETE https://composer-api-dev.genies.com/{{stage}}/user/{{userId}} The {{userId}} should be the userId provided when creating the anonymous user. Example curl --location --request DELETE 'https://composer-api-dev.genies.com/dev/user/8b3f002d-3552-4f82-8a8e-6017a1b454d1' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' Response The response is empty.","title":"Deleting an anonymous user"},{"location":"managed_users/#getting-a-list-of-users","text":"You can get a list of list of anonymous users created on behalf of your Partner API Account. To get the user list call GET https://composer-api-dev.genies.com/{{stage}}/user Example curl --location --request GET 'https://composer-api-dev.genies.com/dev/user?username=funkyuser' \\ --header 'x-api-key: defaultapikey-dev-0123456789' \\ --header 'Authorization: Bearer eyJraWQiOiJGckhlSlBKS1pUeUo0SkR3em9zQTNjYUM0MUNnSkJxZ0FGdUw5N1MwV3hBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0MjQyNjMyOC0zMDU3LTQ1ZWUtYTZhYy0xNjhlZmNkNzhkNzEiLCJhdWQiOiIybnE4OXI1YjRzdHVnNWxzc2dsZmJncG5tIiwiY29nbml0bzpncm91cHMiOlsiYXBwIl0sImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJldmVudF9pZCI6ImE3Y2I5NmZlLWVkODAtNDQyYy04N2FlLWJiYjc1YzE2NmRhYiIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxNjEyNTMyMzkzLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtd2VzdC0yLmFtYXpvbmF3cy5jb21cL3VzLXdlc3QtMl9FaGJ0ckZpRVYiLCJjb2duaXRvOnVzZXJuYW1lIjoiNDI0MjYzMjgtMzA1Ny00NWVlLWE2YWMtMTY4ZWZjZDc4ZDcxIiwiZXhwIjoxNjEyNjE4NzkzLCJpYXQiOjE2MTI1MzIzOTMsImVtYWlsIjoiYXBpK3Rlc3RpbmdAZ2VuaWVzLmNvbSJ9.ViDZy4oM0SeI1_bvjoPhE8JmZSxpV_zx6bJOq-F3FxPOriJaKH1PlhdeWrl8CT0bsgJDQzT-cd0YItxPF1Uk5W7_0yPDBBU-Ubo3YEspSY0Zy43SFXgK2FIMLSZxQH9hAJq38wijmJXM6PI6-c2alCD0fNrhbrjvgmT1MTs5pPHJnZEMOqEG9V_BUco448glXitBUlwOqmmplS8eH8uSbyao6MF_ZjsuRNXlpwxJFqhPLMYumwxoyo3wFajHaA-LTQI0D849WlCCj6rmXkUzvzFRoFBXq6lp_WCzaQdCSnpkIW7lScJOzm2RikuMdSEYlnysPk8iMTHIFVDrpp9zFA' Response The first user in the list will always represent the Partner API user account and will be have the \"groups\": [\"app\"] property. [ { \"userId\" : \"42426328-3057-45ee-a6ac-168efcd78d71\" , \"groups\" : [ \"app\" ], \"emailVerified\" : false , \"email\" : \"demo_partner_api_account@genies.com\" }, { \"userId\" : \"6f3c6283-a102-4e33-8058-c1a0aa02feb6\" , \"parentUserId\" : \"42426328-3057-45ee-a6ac-168efcd78d71\" , \"username\" : \"funkyuser\" }, { \"userId\" : \"17af0ade-cb1c-42ad-8518-e5e94b701267\" , \"parentUserId\" : \"42426328-3057-45ee-a6ac-168efcd78d71\" , \"username\" : \"deadbeef\" }, ... ... ... ]","title":"Getting a list of users"},{"location":"renderer/","text":"Renderer API # After the user creates their Avatar you can use the Renderer API to generate a user avatar icon and a pack of avatar animations Making HTTP requests # HTTP Request URL # The Renderer API URL is: https://render.genies.com Getting the animations list # To get a list of animations available for a user's Avatar call GET https://render.genies.com/animation/{{avatarId}} The {{avatarId}} is provided when getting the Avatar Info Every animation has a name , url and rendering status The lastModified property represents the timestamp when the animation was generated. If the user updated their Avatar and the animation is stale, you should request a re-render to get the animation with the latest user Avatar. Example curl --location --request GET 'https://render.genies.com/animation/3f8b634d-fcf6-4a24-a552-cdfda98893f5' Response [ { \"name\": \"80AerobicPoint-002\", \"url\": \"https://genies-dev.s3-us-west-2.amazonaws.com/3f8b634d-fcf6-4a24-a552-cdfda98893f5/80AerobicPoint-002.mp4\", \"status\": \"ready\", \"lastModified\": 1611282457, \"tags\": [ \"animation\" ] }, { \"name\": \"Anger-003\", \"url\": \"https://genies-dev.s3-us-west-2.amazonaws.com/3f8b634d-fcf6-4a24-a552-cdfda98893f5/Anger-003.mp4\", \"status\": \"ready\", \"lastModified\": 1611282457, \"tags\": [ \"animation\" ] } ] Getting a picture # You can generate a picture as PNG from a keyframe of any animation by calling GET https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/image/{{avatarId}}/{{animationName}} The {{avatarId}} is provided when getting the Avatar Info . The {{animationName}} is found in the animations list Example curl --location --request GET 'https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/image/050ec53c-a12a-445a-9611-ff5fc3ab78f8/Laughing-004' Response The response is the generated photo as image/png . The PNG has transparency and the resolution is 1000x1000. If you need to use a different resolution please contact the Genies Team . Getting an animation # You can get the MP4 for an animation by calling GET https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/animation/{{avatarId}}/{{animationName}} Example curl --location --request GET 'https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/animation/050ec53c-a12a-445a-9611-ff5fc3ab78f8/DiscoDance-003' Response The response is the generated animation as video/mp4 Using Avatar Animations # The animations generated by the Avatar SDK are supplied in a video/mp4 format with background transparency support. The video files contain two video streams: the first containing the main YCbCr content, the second containing Y content representing the alpha mask. To process the video files for your use case we recommend using FFMPEG. Transcoding to WebM # With the video in two streams, use the \u201calphamerge\u201d filter element to recombine into a single stream when transcoding into formats that support alpha: ffmpeg -i Combined.mp4 -filter_complex \"[0:0][0:1] alphamerge\" -pix_fmt yuva420p -an combined.webm Transcoding to GIF # Generate palette ffmpeg -i Combined.mp4 -filter_complex \"[0:v] palettegen\" palette.png Generate GIF ffmpeg -i Combined.mp4 -i palette.png -filter_complex \"[0:0][0:1] alphamerge [merged]; [merged][1:v] paletteuse\" Combined.gif Transcoding to PNG # To create a looping 24-bit animated PNG: ffmpeg -i Combined.mp4 -filter_complex \"[0:0][0:1] alphamerge\" -f apng -plays 0 transcoded.png To convert the video into a set of PNG frames with alpha: ffmpeg -i Combined.mp4 -filter_complex \"[0:0][0:1] alphamerge\" frames_with_alpha%04d.png","title":"Renderer API"},{"location":"renderer/#renderer-api","text":"After the user creates their Avatar you can use the Renderer API to generate a user avatar icon and a pack of avatar animations","title":"Renderer API"},{"location":"renderer/#making-http-requests","text":"","title":"Making HTTP requests"},{"location":"renderer/#http-request-url","text":"The Renderer API URL is: https://render.genies.com","title":"HTTP Request URL"},{"location":"renderer/#getting-the-animations-list","text":"To get a list of animations available for a user's Avatar call GET https://render.genies.com/animation/{{avatarId}} The {{avatarId}} is provided when getting the Avatar Info Every animation has a name , url and rendering status The lastModified property represents the timestamp when the animation was generated. If the user updated their Avatar and the animation is stale, you should request a re-render to get the animation with the latest user Avatar. Example curl --location --request GET 'https://render.genies.com/animation/3f8b634d-fcf6-4a24-a552-cdfda98893f5' Response [ { \"name\": \"80AerobicPoint-002\", \"url\": \"https://genies-dev.s3-us-west-2.amazonaws.com/3f8b634d-fcf6-4a24-a552-cdfda98893f5/80AerobicPoint-002.mp4\", \"status\": \"ready\", \"lastModified\": 1611282457, \"tags\": [ \"animation\" ] }, { \"name\": \"Anger-003\", \"url\": \"https://genies-dev.s3-us-west-2.amazonaws.com/3f8b634d-fcf6-4a24-a552-cdfda98893f5/Anger-003.mp4\", \"status\": \"ready\", \"lastModified\": 1611282457, \"tags\": [ \"animation\" ] } ]","title":"Getting the animations list"},{"location":"renderer/#getting-a-picture","text":"You can generate a picture as PNG from a keyframe of any animation by calling GET https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/image/{{avatarId}}/{{animationName}} The {{avatarId}} is provided when getting the Avatar Info . The {{animationName}} is found in the animations list Example curl --location --request GET 'https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/image/050ec53c-a12a-445a-9611-ff5fc3ab78f8/Laughing-004' Response The response is the generated photo as image/png . The PNG has transparency and the resolution is 1000x1000. If you need to use a different resolution please contact the Genies Team .","title":"Getting a picture"},{"location":"renderer/#getting-an-animation","text":"You can get the MP4 for an animation by calling GET https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/animation/{{avatarId}}/{{animationName}} Example curl --location --request GET 'https://qvvri16pqd.execute-api.us-west-2.amazonaws.com/animation/050ec53c-a12a-445a-9611-ff5fc3ab78f8/DiscoDance-003' Response The response is the generated animation as video/mp4","title":"Getting an animation"},{"location":"renderer/#using-avatar-animations","text":"The animations generated by the Avatar SDK are supplied in a video/mp4 format with background transparency support. The video files contain two video streams: the first containing the main YCbCr content, the second containing Y content representing the alpha mask. To process the video files for your use case we recommend using FFMPEG.","title":"Using Avatar Animations"},{"location":"renderer/#transcoding-to-webm","text":"With the video in two streams, use the \u201calphamerge\u201d filter element to recombine into a single stream when transcoding into formats that support alpha: ffmpeg -i Combined.mp4 -filter_complex \"[0:0][0:1] alphamerge\" -pix_fmt yuva420p -an combined.webm","title":"Transcoding to WebM"},{"location":"renderer/#transcoding-to-gif","text":"Generate palette ffmpeg -i Combined.mp4 -filter_complex \"[0:v] palettegen\" palette.png Generate GIF ffmpeg -i Combined.mp4 -i palette.png -filter_complex \"[0:0][0:1] alphamerge [merged]; [merged][1:v] paletteuse\" Combined.gif","title":"Transcoding to GIF"},{"location":"renderer/#transcoding-to-png","text":"To create a looping 24-bit animated PNG: ffmpeg -i Combined.mp4 -filter_complex \"[0:0][0:1] alphamerge\" -f apng -plays 0 transcoded.png To convert the video into a set of PNG frames with alpha: ffmpeg -i Combined.mp4 -filter_complex \"[0:0][0:1] alphamerge\" frames_with_alpha%04d.png","title":"Transcoding to PNG"},{"location":"support/","text":"For any support in using the Genies Avatar SDK contact us at avatars@genies.com","title":"Support"},{"location":"usermanagement/","text":"By authenticating as a Genies Partner you can create, modify and delete Avatar SDK users #","title":"By authenticating as a Genies Partner you can create, modify and delete Avatar SDK users"},{"location":"usermanagement/#by-authenticating-as-a-genies-partner-you-can-create-modify-and-delete-avatar-sdk-users","text":"","title":"By authenticating as a Genies Partner you can create, modify and delete Avatar SDK users"}]}